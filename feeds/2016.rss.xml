<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>Giampaolo Rodola - 2016</title><link>https://gmpy.dev/</link><description>Python enthusiast, core developer, psutil author</description><lastBuildDate>Sun, 06 Nov 2016 00:00:00 +0100</lastBuildDate><item><title>psutil 5.5.0 is twice as fast</title><link>https://gmpy.dev/blog/2016/psutil-550-is-twice-as-fast</link><description>&lt;p&gt;OK, this is a big one. Starting from psutil 5.0.0 you can query multiple Process information around twice as fast than with previous versions (see &lt;a class="reference external" href="https://github.com/giampaolo/psutil/issues/799"&gt;original ticket&lt;/a&gt; and &lt;a class="reference external" href="https://psutil.readthedocs.io/en/latest/#psutil.Process.oneshot"&gt;updated doc&lt;/a&gt;). It took me 7 months, 108 commits and a massive refactoring of psutil internals (here is the &lt;a class="reference external" href="https://github.com/giampaolo/psutil/pull/937/files"&gt;big …&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Giampaolo Rodola</dc:creator><pubDate>Sun, 06 Nov 2016 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:gmpy.dev,2016-11-06:/blog/2016/psutil-550-is-twice-as-fast</guid><category>2016</category><category>psutil</category><category>performance</category><category>macos</category><category>bsd</category><category>sunos</category></item><item><title>psutil 4.4.0: improved Linux memory metrics</title><link>https://gmpy.dev/blog/2016/psutil-440-improved-linux-memory-metrics</link><description>&lt;p&gt;OK, here's another &lt;a class="reference external" href="https://github.com/giampaolo/psutil"&gt;psutil&lt;/a&gt; release. Main highlights of this release are more accurate memory metrics on Linux and different OSX fixes. Here goes.&lt;/p&gt;
&lt;div class="section" id="linux-virtual-memory"&gt;
&lt;h2&gt;Linux virtual memory&lt;/h2&gt;
&lt;p&gt;This new release sets a milestone regarding &lt;tt class="docutils literal"&gt;virtual_memory()&lt;/tt&gt; metrics on Linux which are now calculated way &lt;a class="reference external" href="https://github.com/giampaolo/psutil/issues/887"&gt;more precisely&lt;/a&gt; (see &lt;a class="reference external" href="https://github.com/giampaolo/psutil/pull/890/files"&gt;commit&lt;/a&gt;). Across the years different …&lt;/p&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Giampaolo Rodola</dc:creator><pubDate>Sun, 23 Oct 2016 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:gmpy.dev,2016-10-23:/blog/2016/psutil-440-improved-linux-memory-metrics</guid><category>2016</category><category>psutil</category><category>memory</category></item><item><title>psutil 4.2.0: Windows services in Python</title><link>https://gmpy.dev/blog/2016/psutil-420-windows-services-in-python</link><description>&lt;p&gt;New &lt;a class="reference external" href="https://github.com/giampaolo/psutil"&gt;psutil&lt;/a&gt; 4.2.0 is out. The main feature of this release is the support for Windows services:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;psutil&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;psutil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;win_service_iter&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;WindowsService&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;AeLookupSvc&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;display_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Application Experience&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mi"&gt;38850096&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;WindowsService&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ALG&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;display_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Application Layer Gateway Service&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mi"&gt;38850128&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;WindowsService&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;APNMCP&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;display_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Ask Update Service&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;at …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Giampaolo Rodola</dc:creator><pubDate>Sun, 15 May 2016 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:gmpy.dev,2016-05-15:/blog/2016/psutil-420-windows-services-in-python</guid><category>2016</category><category>psutil</category><category>windows</category></item><item><title>psutil NetBSD support</title><link>https://gmpy.dev/blog/2016/psutil-netbsd-support</link><description>&lt;p&gt;Roughly two months have passed since I last announced &lt;a class="reference external" href="https://github.com/giampaolo/psutil"&gt;psutil&lt;/a&gt; added support for OpenBSD platforms. Today I am happy to announce we also have NetBSD support! This was contributed by &lt;a class="reference external" href="https://github.com/0-wiz-0"&gt;Thomas Klausner&lt;/a&gt;, &lt;a class="reference external" href="https://github.com/ryoon"&gt;Ryo Onodera&lt;/a&gt; and myself in PR &lt;a class="reference external" href="https://github.com/giampaolo/psutil/pull/557"&gt;#570&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="differences-with-freebsd-and-openbsd"&gt;
&lt;h2&gt;Differences with FreeBSD (and OpenBSD)&lt;/h2&gt;
&lt;p&gt;NetBSD implementation has similar limitations as …&lt;/p&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Giampaolo Rodola</dc:creator><pubDate>Thu, 25 Feb 2016 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:gmpy.dev,2016-02-25:/blog/2016/psutil-netbsd-support</guid><category>2016</category><category>psutil</category><category>bsd</category></item><item><title>Real process memory and environ in Python</title><link>https://gmpy.dev/blog/2016/real-process-memory-and-environ-in-python</link><description>&lt;p&gt;New psutil 4.0.0 is out, with some interesting news about process memory metrics. I'll just get straight to the point and describe what's new.&lt;/p&gt;
&lt;div class="section" id="real-process-memory-info"&gt;
&lt;h2&gt;&amp;quot;Real&amp;quot; process memory info&lt;/h2&gt;
&lt;p&gt;Determining how much memory a process &lt;strong&gt;really&lt;/strong&gt; uses is not an easy matter (see &lt;a class="reference external" href="https://lwn.net/Articles/230975/"&gt;this&lt;/a&gt; and &lt;a class="reference external" href="http://bmaurer.blogspot.it/2006/03/memory-usage-with-smaps.html"&gt;this&lt;/a&gt;). RSS (Resident Set …&lt;/p&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Giampaolo Rodola</dc:creator><pubDate>Wed, 17 Feb 2016 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:gmpy.dev,2016-02-17:/blog/2016/real-process-memory-and-environ-in-python</guid><category>2016</category><category>psutil</category><category>memory</category></item><item><title>How to always execute exit functions in Python</title><link>https://gmpy.dev/blog/2016/how-to-always-execute-exit-functions-in-python</link><description>&lt;p&gt;&lt;em&gt;...or why atexit.register() and signal.signal() are evil&lt;/em&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;UPDATE (2016-02-13)&lt;/strong&gt;: this recipe no longer handles SIGINT, SIGQUIT and SIGABRT as aliases for &amp;quot;application exit&amp;quot; because it was a bad idea. It only handles SIGTERM. Also it no longer support Windows because signal.signal() implementation is too different than POSIX …&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Giampaolo Rodola</dc:creator><pubDate>Fri, 12 Feb 2016 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:gmpy.dev,2016-02-12:/blog/2016/how-to-always-execute-exit-functions-in-python</guid><category>2016</category><category>python</category></item></channel></rss>