<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Giampaolo Rodola - travel</title><link href="https://gmpy.dev/" rel="alternate"></link><link href="https://gmpy.dev/feeds/atom.tag.travel.xml" rel="self"></link><id>https://gmpy.dev/</id><updated>2020-06-25T00:00:00+02:00</updated><subtitle>Python enthusiast, core developer, psutil author</subtitle><entry><title>test 1</title><link href="https://gmpy.dev/blog/2020/test-1" rel="alternate"></link><published>2020-06-25T00:00:00+02:00</published><updated>2020-06-25T00:00:00+02:00</updated><author><name>Giampaolo Rodola</name></author><id>tag:gmpy.dev,2020-06-25:/blog/2020/test-1</id><content type="html">&lt;p&gt;this is a test&lt;/p&gt;
</content><category term="2020"></category><category term="psutil"></category><category term="windows"></category><category term="unittest"></category><category term="travel"></category><category term="python"></category></entry><entry><title>test 2</title><link href="https://gmpy.dev/blog/2020/test-2" rel="alternate"></link><published>2020-06-25T00:00:00+02:00</published><updated>2020-06-25T00:00:00+02:00</updated><author><name>Giampaolo Rodola</name></author><id>tag:gmpy.dev,2020-06-25:/blog/2020/test-2</id><content type="html">&lt;p&gt;this is a test 2&lt;/p&gt;
</content><category term="2020"></category><category term="psutil"></category><category term="windows"></category><category term="unittest"></category><category term="travel"></category><category term="python"></category></entry><entry><title>System load average on Windows in Python</title><link href="https://gmpy.dev/blog/2019/system-load-average-on-windows-in-python" rel="alternate"></link><published>2019-05-29T00:00:00+02:00</published><updated>2019-05-29T00:00:00+02:00</updated><author><name>Giampaolo Rodola</name></author><id>tag:gmpy.dev,2019-05-29:/blog/2019/system-load-average-on-windows-in-python</id><summary type="html">&lt;p&gt;New &lt;a class="reference external" href="https://github.com/giampaolo/psutil/"&gt;psutil&lt;/a&gt; 5.6.2 release implements an emulation of &lt;a class="reference external" href="https://docs.python.org/3/library/os.html#os.getloadavg"&gt;os.getloadavg()&lt;/a&gt; on Windows which was kindly &lt;a class="reference external" href="https://github.com/giampaolo/psutil/pull/1485"&gt;contributed by Ammar Askar&lt;/a&gt; who originally implemented it for &lt;a class="reference external" href="https://github.com/python/cpython/pull/8357/files"&gt;cPython's test suite&lt;/a&gt;. This idea has been floating around for quite a while. The first proposal dates back to &lt;a class="reference external" href="https://code.google.com/archive/p/psutil/issues/139"&gt;2010&lt;/a&gt;, when psutil was still …&lt;/p&gt;</summary><content type="html">&lt;p&gt;New &lt;a class="reference external" href="https://github.com/giampaolo/psutil/"&gt;psutil&lt;/a&gt; 5.6.2 release implements an emulation of &lt;a class="reference external" href="https://docs.python.org/3/library/os.html#os.getloadavg"&gt;os.getloadavg()&lt;/a&gt; on Windows which was kindly &lt;a class="reference external" href="https://github.com/giampaolo/psutil/pull/1485"&gt;contributed by Ammar Askar&lt;/a&gt; who originally implemented it for &lt;a class="reference external" href="https://github.com/python/cpython/pull/8357/files"&gt;cPython's test suite&lt;/a&gt;. This idea has been floating around for quite a while. The first proposal dates back to &lt;a class="reference external" href="https://code.google.com/archive/p/psutil/issues/139"&gt;2010&lt;/a&gt;, when psutil was still hosted on Google Code, and it popped up &lt;a class="reference external" href="https://github.com/giampaolo/psutil/issues?utf8=%E2%9C%93&amp;amp;q=getloadavg"&gt;multiple times&lt;/a&gt; throughout the years. There was/is a bunch of info on internet mentioning the bits with which it's theoretically possible to do this (the so called System Processor Queue Length), but I couldn't find any real implementation. A &lt;a class="reference external" href="https://www.google.com/search?client=ubuntu&amp;amp;hs=2EI&amp;amp;channel=fs&amp;amp;ei=LafCXO2ZE8PKswX9kY-wAw&amp;amp;q=windows+load+average&amp;amp;oq=windows+load+average&amp;amp;gs_l=psy-ab.3..0j0i22i30l7.12536.13873..14008...0.0..0.482.2591.4-6......0....1..gws-wiz.......0i71j0i131.37ys3SB25pE"&gt;Google search&lt;/a&gt; tells there is quite some demand for this, but very few tools out there providing this natively (the only one I could find is this &lt;a class="reference external" href="https://blog.sflow.com/2011/02/windows-load-average.html"&gt;sFlowTrend&lt;/a&gt; tool and &lt;a class="reference external" href="https://www.zabbix.com/forum/zabbix-help/50423-windows-cpu-load"&gt;Zabbix&lt;/a&gt;), so I'm very happy this finally landed into psutil / Python.&lt;/p&gt;
&lt;div class="section" id="other-improvements-and-bugfixes-in-psutil-5-6-2"&gt;
&lt;h2&gt;Other improvements and bugfixes in psutil 5.6.2&lt;/h2&gt;
&lt;p&gt;The full list is &lt;a class="reference external" href="https://github.com/giampaolo/psutil/blob/master/HISTORY.rst#562"&gt;here&lt;/a&gt; but I would like to mention a couple:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/giampaolo/psutil/issues/1476"&gt;1476&lt;/a&gt;: the possibility to set process' high I/O priority on Windows&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/giampaolo/psutil/issues/1476"&gt;1458&lt;/a&gt;: colorized test output. I admit nobody will use this directly but it's very cool and I'm porting it to a bunch of other projects I work on (e.g. pyftpdlib). Also, perhaps this could be a good candidate for a small module to put on PYPI which can also include some functionalities taken from pytest and which I'm gradually re-implementing in unittest module amongst which:&lt;ul&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/giampaolo/psutil/issues/1478"&gt;1478&lt;/a&gt;: re-running failed tests&lt;/li&gt;
&lt;li&gt;display test timings/durations: this is something I'm contributing to cPython, see &lt;a class="reference external" href="https://bugs.python.org/issue4080"&gt;BPO-4080&lt;/a&gt; and and &lt;a class="reference external" href="https://github.com/python/cpython/pull/12271/files"&gt;PR-12271&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="about-me"&gt;
&lt;h2&gt;About me&lt;/h2&gt;
&lt;p&gt;I'm currently in China (Shenzhen) for a mix of vacation and work, and I will likely take a break from Open Source for a while (likely 2.5 months, during which I will also go to Philippines and Japan - I love Asia ;-)).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="external"&gt;
&lt;h2&gt;External&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.reddit.com/r/Python/comments/bhji0m/new_psutil_562_with_load_average_emulation_on/"&gt;Reddit&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="2019"></category><category term="psutil"></category><category term="windows"></category><category term="unittest"></category><category term="travel"></category><category term="python"></category></entry><entry><title>psutil 5.3.0 and full unicode support</title><link href="https://gmpy.dev/blog/2017/psutil-530-and-full-unicode-support" rel="alternate"></link><published>2017-09-03T00:00:00+02:00</published><updated>2017-09-03T00:00:00+02:00</updated><author><name>Giampaolo Rodola</name></author><id>tag:gmpy.dev,2017-09-03:/blog/2017/psutil-530-and-full-unicode-support</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="https://github.com/giampaolo/psutil/"&gt;psutil&lt;/a&gt; 5.3.0 is finally out. This release is a major one, as it includes tons of improvements and bugfixes, probably like no other previous release. It is interesting to notice how huge the &lt;a class="reference external" href="https://github.com/giampaolo/psutil/compare/release-5.2.2...release-5.3.0#files_bucket"&gt;diff&lt;/a&gt; between 5.2.2 and 5.3.0 is. This is due to the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a class="reference external" href="https://github.com/giampaolo/psutil/"&gt;psutil&lt;/a&gt; 5.3.0 is finally out. This release is a major one, as it includes tons of improvements and bugfixes, probably like no other previous release. It is interesting to notice how huge the &lt;a class="reference external" href="https://github.com/giampaolo/psutil/compare/release-5.2.2...release-5.3.0#files_bucket"&gt;diff&lt;/a&gt; between 5.2.2 and 5.3.0 is. This is due to the fact that I've been travelling quite a lot this year, so I kept postponing it. It may sound weird but I consider publishing a new release and write a blog post about more stressful than working on the release itself. =). Anyway, here goes.
Full Unicode support
This is the biggest change. In order to achieve this I had to refactor all functions and internals either returning or accepting a string. Incidentally this helped me having a better understanding of how Unicode works and how it should be handled at the C level in terms of differences between Python 2 and 3. Issue &lt;a class="reference external" href="https://github.com/giampaolo/psutil/issues/1040"&gt;#1040&lt;/a&gt; includes all the reasonings I've been through and potentially serves as a documentation for people who are facing a similar task (handling Unicode in C for both Python 2 and 3). Up until version 5.2.x psutil functions returning a string had different problems as they could:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;raise decoding error on Python 3 in case of non-ASCII string&lt;/li&gt;
&lt;li&gt;return unicode instead of str (Python 2)&lt;/li&gt;
&lt;li&gt;return incorrect / invalid encoded data in case of non-ASCII string&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;5.3.0 fixes these three issues and consolidates the correct handling of Unicode strings. On Windows this was achieved by using Unicode-specific Windows APIs. The notes below describe how Unicode and strings in general are handled internally by psutil and they apply to any API returning a string such as &lt;a class="reference external" href="https://psutil.readthedocs.io/en/latest/#psutil.Process.exe"&gt;Process.exe&lt;/a&gt; or &lt;a class="reference external" href="https://psutil.readthedocs.io/en/latest/#psutil.Process.cwd"&gt;Process.cwd&lt;/a&gt;, including non-filesystem related methods such as &lt;a class="reference external" href="https://psutil.readthedocs.io/en/latest/#psutil.Process.username"&gt;Process.username&lt;/a&gt; or &lt;a class="reference external" href="https://psutil.readthedocs.io/en/latest/#psutil.WindowsService.description"&gt;WindowsService.description&lt;/a&gt;:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;all strings are encoded by using the OS filesystem encoding (&lt;a class="reference external" href="https://docs.python.org/3/library/sys.html#sys.getfilesystemencoding"&gt;sys.getfilesystemencoding()&lt;/a&gt;) which varies depending on the platform (e.g. &amp;quot;UTF-8&amp;quot; on OSX, &amp;quot;mbcs&amp;quot; on Win)&lt;/li&gt;
&lt;li&gt;no API call is supposed to crash with UnicodeDecodeError&lt;/li&gt;
&lt;li&gt;instead, in case of badly encoded data returned by the OS, the following error handlers are used to replace the corrupted characters in the string:&lt;ul&gt;
&lt;li&gt;Python 3: &lt;a class="reference external" href="https://docs.python.org/3/library/sys.html#sys.getfilesystemencodeerrors"&gt;sys.getfilesystemencodeerrors()&lt;/a&gt; (PY 3.6+) or &lt;tt class="docutils literal"&gt;&amp;quot;surrogatescape&amp;quot;&lt;/tt&gt; on POSIX and &amp;quot;replace&amp;quot; on Windows&lt;/li&gt;
&lt;li&gt;Python 2: &amp;quot;replace&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;on Python 2 all APIs return bytes (str type), never unicode&lt;/li&gt;
&lt;li&gt;on Python 2 you can go back to unicode by doing:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;unicode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;proc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exe&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getdefaultencoding&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;errors&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;replace&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="improved-process-iter-function"&gt;
&lt;h2&gt;Improved process_iter() function&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://psutil.readthedocs.io/en/latest/#psutil.process_iter"&gt;process_iter()&lt;/a&gt; accepts two new parameters in order to invoke &lt;a class="reference external" href="https://psutil.readthedocs.io/en/latest/#psutil.Process.as_dict"&gt;Process.as_dict()&lt;/a&gt; internally: &amp;quot;attrs&amp;quot; and &amp;quot;ad_value&amp;quot;. With this you can iterate over all processes in one shot without having to catch NoSuchProcess explicitly. Before:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;psutil&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;proc&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;psutil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;process_iter&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;         &lt;span class="n"&gt;pinfo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;proc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pid&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;psutil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NoSuchProcess&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;         &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;         &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pinfo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pid&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;systemd&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pid&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;kthreadd&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pid&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ksoftirqd/0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;psutil&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;proc&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;psutil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;process_iter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pid&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]):&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;proc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pid&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;systemd&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pid&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;kthreadd&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pid&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ksoftirqd/0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This improves expressiveness as it makes it possible to use nice list/dict comprehensions. Here's some examples.&lt;/p&gt;
&lt;p&gt;Processes having &amp;quot;python&amp;quot; in their name:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pprint&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;pprint&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;pp&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;pp&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;psutil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;process_iter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pid&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;python&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt;
&lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;python3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pid&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;21947&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;python&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pid&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;23835&lt;/span&gt;&lt;span class="p"&gt;}]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Processes owned by user:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;getpass&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;pp&lt;/span&gt;&lt;span class="p"&gt;([(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;psutil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;process_iter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;username&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;username&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;getpass&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getuser&lt;/span&gt;&lt;span class="p"&gt;()])&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;16832&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;bash&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;19772&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ssh&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20492&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;python&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Processes actively running:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;pp&lt;/span&gt;&lt;span class="p"&gt;([(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;psutil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;process_iter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;status&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;status&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;psutil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;STATUS_RUNNING&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="mi"&gt;1150&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Xorg&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;status&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;running&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}),&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1776&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;unity-panel-service&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;status&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;running&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}),&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20492&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;python&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;status&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;running&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;})]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="automatic-overflow-handling-of-numbers"&gt;
&lt;h2&gt;Automatic overflow handling of numbers&lt;/h2&gt;
&lt;p&gt;On very busy or long-lived system systems numbers returned by &lt;a class="reference external" href="https://psutil.readthedocs.io/en/latest/#psutil.disk_io_counters"&gt;disk_io_counters()&lt;/a&gt; and &lt;a class="reference external" href="https://psutil.readthedocs.io/en/latest/#psutil.net_io_counters"&gt;net_io_counters()&lt;/a&gt; functions may wrap (restart from zero). Up to version 5.2.x you had to take this into account while now this is automatically handled by psutil (see: &lt;a class="reference external" href="https://github.com/giampaolo/psutil/issues/802"&gt;#802&lt;/a&gt;). If a &amp;quot;counter&amp;quot; restarts from 0 psutil will add the value from the previous call for you so that numbers will never decrease. This is crucial for applications monitoring disk or network I/O in real time. Old behavior can be resumed by passing nowrap=True argument.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="sunos-process-environ"&gt;
&lt;h2&gt;SunOS Process environ()&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://psutil.readthedocs.io/en/latest/#psutil.Process.environ"&gt;Process.environ()&lt;/a&gt; is now available also on SunOS (see &lt;a class="reference external" href="https://github.com/giampaolo/psutil/pull/1091"&gt;#1091&lt;/a&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="other-improvements-and-bug-fixes"&gt;
&lt;h2&gt;Other improvements and bug fixes&lt;/h2&gt;
&lt;p&gt;Amongst others, here's a couple of important bug fixes I'd like to mention:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/giampaolo/psutil/pull/1044"&gt;#1044&lt;/a&gt;: on OSX different Process methods could incorrectly raise AccessDenied for zombie processes. This was due to poor proc_pidpath OSX API.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/giampaolo/psutil/pull/1094"&gt;#1094&lt;/a&gt;: on Windows, pid_exists() may lie due to the poor OpenProcess Windows API which can return a handle even when a process PID no longer exists. This had repercussions for many Process methods such as &lt;a class="reference external" href="https://psutil.readthedocs.io/en/latest/#psutil.Process.cmdline"&gt;cmdline()&lt;/a&gt;, &lt;a class="reference external" href="https://psutil.readthedocs.io/en/latest/#psutil.Process.environ"&gt;environ()&lt;/a&gt;, &lt;a class="reference external" href="https://psutil.readthedocs.io/en/latest/#psutil.Process.cwd"&gt;cwd()&lt;/a&gt;, &lt;a class="reference external" href="https://psutil.readthedocs.io/en/latest/#psutil.Process.connections"&gt;connections()&lt;/a&gt; and others which could have unpredictable behaviors such as returning empty data or erroneously raise NoSuchProcess exceptions. For the same reason (broken OpenProcess API), processes could unexpectedly stick around after using &lt;a class="reference external" href="https://psutil.readthedocs.io/en/latest/#psutil.Process.terminate"&gt;terminate()&lt;/a&gt; and &lt;a class="reference external" href="https://psutil.readthedocs.io/en/latest/#psutil.Process.wait"&gt;wait()&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;BSD systems also received some love (NetBSD and OpenBSD in particular). Different memory leaks were fixed and functions returning connected sockets were partially rewritten. The full list of enhancement and bug fixes can be seen &lt;a class="reference external" href="https://github.com/giampaolo/psutil/blob/master/HISTORY.rst#530"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="about-me"&gt;
&lt;h2&gt;About me&lt;/h2&gt;
&lt;p&gt;I would like to spend a couple more words about my current situation. Last year (2016) I relocated to Prague and remote worked from there the whole year (it's been cool - great city!). This year I have mainly been resting in Turin (Italy) due to some health issues and travelling across Asia once I started to recover. I am currently in Shenzhen, China, and unless the current situation with North Korea gets worse I'm planning to continue my trip until November and visit Taiwan, South Korea and Japan. Once I'm finished the plan is to briefly return to Turin (Italy) and finally return to Prague. By then I will probably be looking for a new (remote) gig again, so if you have anything for me by November feel free to send me a message. ;-)&lt;/p&gt;
&lt;/div&gt;
</content><category term="2017"></category><category term="psutil"></category><category term="travel"></category><category term="python"></category></entry><entry><title>psutil 3.0, aka how I reimplemented ifconfig in Python</title><link href="https://gmpy.dev/blog/2015/psutil-30-aka-how-i-reimplemented-ifconfig-in-python" rel="alternate"></link><published>2015-06-13T00:00:00+02:00</published><updated>2015-06-13T00:00:00+02:00</updated><author><name>Giampaolo Rodola</name></author><id>tag:gmpy.dev,2015-06-13:/blog/2015/psutil-30-aka-how-i-reimplemented-ifconfig-in-python</id><summary type="html">&lt;p&gt;Here we are. It's been a long time since my last blog post and my last &lt;a class="reference external" href="https://github.com/giampaolo/psutil"&gt;psutil&lt;/a&gt; release. The reason? I've been travelling! I mean... a lot. I've spent 3 months in Berlin, 3 weeks in Japan and 2 months in New York City. While I was there I finally …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Here we are. It's been a long time since my last blog post and my last &lt;a class="reference external" href="https://github.com/giampaolo/psutil"&gt;psutil&lt;/a&gt; release. The reason? I've been travelling! I mean... a lot. I've spent 3 months in Berlin, 3 weeks in Japan and 2 months in New York City. While I was there I finally had the chance to meet my friend &lt;a class="reference external" href="http://jayloden.com/software.htm"&gt;Jay Loden&lt;/a&gt; in person. &lt;a class="reference external" href="https://fbcdn-sphotos-h-a.akamaihd.net/hphotos-ak-xta1/t31.0-8/11263024_10153285412879890_759604551146752808_o.jpg"&gt;Jay and I&lt;/a&gt; originally started working on psutil together &lt;a class="reference external" href="https://groups.google.com/forum/#!topic/psutil-dev/fj8DQ3lGFH4"&gt;7 years ago&lt;/a&gt;.&lt;/p&gt;
&lt;div&gt;
    &lt;a href="/images/me-with-jay.jpg"&gt;
    &lt;img src="/images/me-with-jay.jpg" style="width:750px; height:500px" /&gt;
    &lt;/a&gt;
&lt;/div&gt;&lt;p&gt;Back then I didn't know any C (and I still am a terrible C developer) so he's been crucial to develop the initial psutil skeleton including OSX and Windows support. I'm back home now (but not for long ;-)), so I finally have some time to write this blog post and tell you about the new psutil release. Let's see what happened.&lt;/p&gt;
&lt;div class="section" id="net-if-addrs"&gt;
&lt;h2&gt;net_if_addrs()&lt;/h2&gt;
&lt;p&gt;In a few words, we're now able to list network interface addresses similarly to &amp;quot;ifconfig&amp;quot; command on UNIX:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;psutil&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pprint&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;pprint&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;pprint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;psutil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;net_if_addrs&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ethernet0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;snic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;family&lt;/span&gt;&lt;span class="o"&gt;=&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;AddressFamily&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AF_INET&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;10.0.0.4&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;netmask&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;255.0.0.0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;broadcast&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;10.255.255.255&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
               &lt;span class="n"&gt;snic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;family&lt;/span&gt;&lt;span class="o"&gt;=&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;AddressFamily&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AF_PACKET&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;9c:eb:e8:0b:05:1f&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;netmask&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;broadcast&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ff:ff:ff:ff:ff:ff&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)],&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;snic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;family&lt;/span&gt;&lt;span class="o"&gt;=&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;AddressFamily&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AF_INET&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;127.0.0.1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;netmask&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;255.0.0.0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;broadcast&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;127.0.0.1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
               &lt;span class="n"&gt;snic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;family&lt;/span&gt;&lt;span class="o"&gt;=&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;AddressFamily&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AF_PACKET&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;00:00:00:00:00:00&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;netmask&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;broadcast&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;00:00:00:00:00:00&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)]}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is limited to AF_INET (IPv4), AF_INET6 (IPv6) and AF_LINK (ETHERNET) address families. If you want something more poweful (e.g. AF_BLUETOOTH) you can take a look at &lt;a class="reference external" href="https://pypi.python.org/pypi/netifaces/"&gt;netifaces&lt;/a&gt; extension. And here's the code which does these tricks on POSIX and Windows:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/giampaolo/psutil/blob/39161251010503d6b087807c473f4fb648dfcbce/psutil/_psutil_posix.c#L151"&gt;POSIX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/giampaolo/psutil/blob/39161251010503d6b087807c473f4fb648dfcbce/psutil/_psutil_windows.c#L2907"&gt;Windows&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Also, here's some &lt;a class="reference external" href="https://psutil.readthedocs.io/en/latest/#psutil.net_if_addrs"&gt;doc&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="net-if-stats"&gt;
&lt;h2&gt;net_if_stats()&lt;/h2&gt;
&lt;p&gt;This will return a bunch of information about network interface cards:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;psutil&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pprint&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;pprint&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;pprint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;psutil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;net_if_stats&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ethernet&amp;#39;&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;snicstats&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;isup&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;duplex&lt;/span&gt;&lt;span class="o"&gt;=&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;NicDuplex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NIC_DUPLEX_FULL&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;speed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;mtu&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1500&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;snicstats&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;isup&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;duplex&lt;/span&gt;&lt;span class="o"&gt;=&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;NicDuplex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NIC_DUPLEX_UNKNOWN&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;speed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;mtu&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;65536&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Again, here's the code for each platform:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/giampaolo/psutil/blob/39161251010503d6b087807c473f4fb648dfcbce/psutil/_psutil_windows.c#L3057"&gt;Windows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/giampaolo/psutil/blob/39161251010503d6b087807c473f4fb648dfcbce/psutil/_psutil_linux.c#L474"&gt;Linux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/giampaolo/psutil/blob/39161251010503d6b087807c473f4fb648dfcbce/psutil/_psutil_posix.c#L229"&gt;OSX &amp;amp; FreeBSD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/giampaolo/psutil/blob/39161251010503d6b087807c473f4fb648dfcbce/psutil/_psutil_sunos.c#L1153"&gt;SunOS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;...and the &lt;a class="reference external" href="https://psutil.readthedocs.io/en/latest/#psutil.net_if_stats"&gt;doc&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="enums"&gt;
&lt;h2&gt;Enums&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.python.org/3/library/enum.html"&gt;Enums&lt;/a&gt; are a nice new feature introduced in Python 3.4. Very briefly (or at least, this is what I appreciate the most about them), they help you write an API with human-readable constants. If you use Python 2 you'll see something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;psutil&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;psutil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IOPRIO_CLASS_IDLE&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;On Python 3.4 you'll see a more informative:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;psutil&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;psutil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IOPRIO_CLASS_IDLE&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IOPriority&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IOPRIO_CLASS_IDLE&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;They are backward compatible, meaning if you're sending serialized data produced with psutil through the network you can safely use comparison operators and so on. The psutil APIs returning enums (on Python &amp;gt;=3.4) are:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;psutil.net_connections() (the address families):&lt;/li&gt;
&lt;li&gt;psutil.Process.connections() (same as above)&lt;/li&gt;
&lt;li&gt;psutil.net_if_stats()  (all &lt;tt class="docutils literal"&gt;NIC_DUPLEX_*&lt;/tt&gt; constants)&lt;/li&gt;
&lt;li&gt;psutil.Process.nice() on Windows (for all the &lt;tt class="docutils literal"&gt;*_PRIORITY_CLASS&lt;/tt&gt; constants)&lt;/li&gt;
&lt;li&gt;psutil.Process.ionice() on Linux (for all the &lt;tt class="docutils literal"&gt;IOPRIO_CLASS_*&lt;/tt&gt; constants)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All the other existing constants remained plain strings (&lt;tt class="docutils literal"&gt;STATUS_*&lt;/tt&gt;) or integers (&lt;tt class="docutils literal"&gt;CONN_*&lt;/tt&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="zombie-processes"&gt;
&lt;h2&gt;Zombie processes&lt;/h2&gt;
&lt;p&gt;This is a big one. The full story is &lt;a class="reference external" href="https://github.com/giampaolo/psutil/issues/428"&gt;here&lt;/a&gt; but basically the support for &lt;a class="reference external" href="http://askubuntu.com/a/48625"&gt;zombie processes&lt;/a&gt; on UNIX was &lt;a class="reference external" href="https://github.com/giampaolo/psutil/issues/428"&gt;broken&lt;/a&gt; (except on Linux, and Windows doesn't have zombie processes). Up until psutil 2.X we could instantiate a zombie process:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;pid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;create_zombie&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;psutil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;...but every time we queried it we got a NoSuchProcess exception:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;psutil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;psutil/__init__.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;374&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;_init&lt;/span&gt;
    &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;NoSuchProcess&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;psutil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NoSuchProcess&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;no&lt;/span&gt; &lt;span class="n"&gt;process&lt;/span&gt; &lt;span class="n"&gt;found&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;pid&lt;/span&gt; &lt;span class="mi"&gt;123&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That was misleading though because the PID technically still existed:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;psutil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pid_exists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kc"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Furthermore, depending on what platform you were on, certain process stats could still be queried (instead of raising NoSuchProcess):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;psutil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cmdline&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;python&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Also process_iter() did not return zombie processes at all. This was probably the worst aspect because being able to identify them is an important use case, as they signal an issue with process: if a parent process spawns a child, terminates it (via kill()), but doesn't wait() for it it will create a zombie. Long story short, the way this changed in psutil 3.0 is that:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;we now have a new ZombieProcess exception, raised every time we're not able to query a process because it's a zombie&lt;/li&gt;
&lt;li&gt;it is raised instead of NoSuchProcess (which was incorrect and misleading)&lt;/li&gt;
&lt;li&gt;it is still backward compatible (meaning you won't have to change your old code) because it inherits from NoSuchProcess&lt;/li&gt;
&lt;li&gt;process_iter() finally works, meaning you can safely identify zombie processes like this:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;psutil&lt;/span&gt;
&lt;span class="n"&gt;zombies&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;psutil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;process_iter&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;psutil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;STATUS_ZOMBIE&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;zombies&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;NoSuchProcess&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="removal-of-deprecated-apis"&gt;
&lt;h2&gt;Removal of deprecated APIs&lt;/h2&gt;
&lt;p&gt;This is another big one, probably the biggest. In a previous blog post I already talked about deprecated APIs. What I did back then (January 2014) was to rename and officially deprecate different APIs and provide aliases for them so that people wouldn't yell at me because I broke their existent code. The most interesting deprecation was certainly the one affecting module constants and the hack which was used in order to provide &amp;quot;module properties&amp;quot;. With this new release I decided to get rid of all those aliases. I'm sure this will cause problems but hey! This is a new major release, right? =). Plus the amount of crap which was removed is impressive (see the &lt;a class="reference external" href="https://github.com/giampaolo/psutil/commit/ab211934af0acf99091e4cd534fc5bbe7fd3b233"&gt;commit&lt;/a&gt;). Here's the old aliases which are now gone for good (or bad, depending on how much headache they will cause you):&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="removed-module-functions-and-constants"&gt;
&lt;h2&gt;Removed module functions and constants&lt;/h2&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="48%" /&gt;
&lt;col width="52%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Already deprecated name&lt;/th&gt;
&lt;th class="head"&gt;New name&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;psutil.BOOT_TIME()&lt;/td&gt;
&lt;td&gt;psutil.boot_time()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;psutil.NUM_CPUS()&lt;/td&gt;
&lt;td&gt;psutil.cpu_count()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;psutil.TOTAL_PHYMEM()&lt;/td&gt;
&lt;td&gt;psutil.virtual_memory().total&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;psutil.avail_phymem()&lt;/td&gt;
&lt;td&gt;psutil.virtual_memory().free&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;psutil.avail_virtmem()&lt;/td&gt;
&lt;td&gt;psutil.swap_memory().free&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;psutil.cached_phymem()&lt;/td&gt;
&lt;td&gt;psutil.virtual_memory().cached&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;psutil.get_pid_list()&lt;/td&gt;
&lt;td&gt;psutil.pids().cached&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;psutil.get_process_list()&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;psutil.get_users()&lt;/td&gt;
&lt;td&gt;psutil.users()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;psutil.network_io_counters()&lt;/td&gt;
&lt;td&gt;psutil.net_io_counters()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;psutil.phymem_buffers()&lt;/td&gt;
&lt;td&gt;psutil.virtual_memory().buffers&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;psutil.phymem_usage()&lt;/td&gt;
&lt;td&gt;psutil.virtual_memory()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;psutil.total_virtmem()&lt;/td&gt;
&lt;td&gt;psutil.swap_memory().total&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;psutil.used_virtmem()&lt;/td&gt;
&lt;td&gt;psutil.swap_memory().used&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;psutil.used_phymem()&lt;/td&gt;
&lt;td&gt;psutil.virtual_memory().used&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;psutil.virtmem_usage()&lt;/td&gt;
&lt;td&gt;psutil.swap_memory()&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Process methods (assuming p = psutil.Process()):&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="48%" /&gt;
&lt;col width="52%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Already deprecated name&lt;/th&gt;
&lt;th class="head"&gt;New name&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;p.get_children()&lt;/td&gt;
&lt;td&gt;p.children()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;p.get_connections()&lt;/td&gt;
&lt;td&gt;p.connections()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;p.get_cpu_affinity()&lt;/td&gt;
&lt;td&gt;p.cpu_affinity()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;p.get_cpu_percent()&lt;/td&gt;
&lt;td&gt;p.cpu_percent()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;p.get_cpu_times()&lt;/td&gt;
&lt;td&gt;p.cpu_times()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;p.get_io_counters()&lt;/td&gt;
&lt;td&gt;p.io_counters()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;p.get_ionice()&lt;/td&gt;
&lt;td&gt;p.ionice()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;p.get_memory_info()&lt;/td&gt;
&lt;td&gt;p.memory_info()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;p.get_ext_memory_info()&lt;/td&gt;
&lt;td&gt;p.memory_info_ex()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;p.get_memory_maps()&lt;/td&gt;
&lt;td&gt;p.memory_maps()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;p.get_memory_percent()&lt;/td&gt;
&lt;td&gt;p.memory_percent()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;p.get_nice()&lt;/td&gt;
&lt;td&gt;p.nice()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;p.get_num_ctx_switches()&lt;/td&gt;
&lt;td&gt;p.num_ctx_switches()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;p.get_num_fds()&lt;/td&gt;
&lt;td&gt;p.num_fds()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;p.get_num_threads()&lt;/td&gt;
&lt;td&gt;p.num_threads()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;p.get_open_files()&lt;/td&gt;
&lt;td&gt;p.open_files()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;p.get_rlimit()&lt;/td&gt;
&lt;td&gt;p.rlimit()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;p.get_threads()&lt;/td&gt;
&lt;td&gt;p.threads()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;p.getcwd()&lt;/td&gt;
&lt;td&gt;p.cwd()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;p.set_cpu_affinity()&lt;/td&gt;
&lt;td&gt;p.cpu_affinity()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;p.set_ionice()&lt;/td&gt;
&lt;td&gt;p.ionice()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;p.set_nice()&lt;/td&gt;
&lt;td&gt;p.nice()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;p.set_rlimit()&lt;/td&gt;
&lt;td&gt;p.rlimit()&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;If your code suddenly breaks with AttributeError after you upgraded psutil it means you were using one of those deprecated aliases. In that case just take a look at the table above and rename stuff in accordance.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bug-fixes"&gt;
&lt;h2&gt;Bug fixes&lt;/h2&gt;
&lt;p&gt;I fixed a lot of stuff (full list &lt;a class="reference external" href="https://github.com/giampaolo/psutil/blob/master/HISTORY.rst"&gt;here&lt;/a&gt;), but here's the list of things which I think are worth mentioning:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/giampaolo/psutil/issues/512"&gt;#512&lt;/a&gt;: [FreeBSD] fix segfault in net_connections().&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/giampaolo/psutil/issues/593"&gt;#593&lt;/a&gt;: [FreeBSD] Process.memory_maps() segfaults.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/giampaolo/psutil/issues/606"&gt;#606&lt;/a&gt;: Process.parent() may swallow NoSuchProcess exceptions.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/giampaolo/psutil/issues/614"&gt;#614&lt;/a&gt;: [Linux]: cpu_count(logical=False) return the number of physical CPUs instead of physical cores.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/giampaolo/psutil/issues/628"&gt;#628&lt;/a&gt;: [Linux] Process.name() truncates process name in case it contains spaces or parentheses.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="ease-of-development"&gt;
&lt;h2&gt;Ease of development&lt;/h2&gt;
&lt;p&gt;These are not enhancements you will directly benefit from but I put some effort into making my life easier every time I work on psutil.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;I care about psutil code being fully &lt;a class="reference external" href="https://www.python.org/dev/peps/pep-0008/"&gt;PEP8&lt;/a&gt; compliant so I added a &lt;a class="reference external" href="https://github.com/giampaolo/psutil/blob/master/.git-pre-commit"&gt;pre-commit&lt;/a&gt; GIT hook which runs &lt;a class="reference external" href="https://pypi.python.org/pypi/flake8"&gt;flake8&lt;/a&gt; on every commit and rejects it if the coding style is not compliant. The way I install this is via &lt;a class="reference external" href="https://github.com/giampaolo/psutil/blob/82da82a6bb94ed5c6faf9d762ef4ad0fec18f01b/Makefile#L108)"&gt;make install-git-hooks&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;I added a &lt;tt class="docutils literal"&gt;make &lt;span class="pre"&gt;install-dev-deps&lt;/span&gt;&lt;/tt&gt; command which installs all deps and stuff which is useful for testing (ipdb, coverage, etc).&lt;/li&gt;
&lt;li&gt;A new &lt;tt class="docutils literal"&gt;make coverage&lt;/tt&gt; command which runs &lt;a class="reference external" href="http://nedbatchelder.com/code/coverage/"&gt;coverage&lt;/a&gt;. With this I discovered some of parts in the code which weren't covered by tests and I fixed that.&lt;/li&gt;
&lt;li&gt;I started using &lt;a class="reference external" href="https://github.com/giampaolo/psutil/blob/master/tox.ini"&gt;tox&lt;/a&gt; to easily test psutil against all supported Python versions (from 2.6 to 3.4) in one shot.&lt;/li&gt;
&lt;li&gt;I &lt;a class="reference external" href="https://github.com/giampaolo/psutil/issues/629"&gt;reorganized tests&lt;/a&gt; so that now they can be easily executed with py.test and nose (before, only unittest runner was fully supported)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="final-words"&gt;
&lt;h2&gt;Final words&lt;/h2&gt;
&lt;p&gt;I must say I'm pretty satisfied with how psutil is going and the satisfaction I still get every time I work on it. Right now it gets almost &lt;a class="reference external" href="https://pypi.python.org/pypi/psutil#downloads"&gt;800.000 download a month&lt;/a&gt;, which is pretty great for a Python library. As of right now I consider psutil almost &amp;quot;completed&amp;quot; in terms of features, meaning I'm basically running out of ideas on what I should add next (see &lt;a class="reference external" href="https://github.com/giampaolo/psutil/blob/master/TODO"&gt;TODO&lt;/a&gt;). From now on the future development will probably focus on adding support for more exotic platforms (&lt;a class="reference external" href="https://github.com/giampaolo/psutil/issues/562"&gt;OpenBSD&lt;/a&gt;, &lt;a class="reference external" href="https://github.com/giampaolo/psutil/pull/557"&gt;NetBSD&lt;/a&gt;, &lt;a class="reference external" href="https://github.com/giampaolo/psutil/issues/355"&gt;Android&lt;/a&gt;). There also have been some discussions on python-ideas mailing list about &lt;a class="reference external" href="https://mail.python.org/pipermail//python-ideas/2014-October/029835.html"&gt;including psutil into Python stdlib&lt;/a&gt; but, assuming that will ever happen, it's still far away in the future as it would require a lot of time which I currently don't have. That should be all. I hope you will all enjoy this new release.&lt;/p&gt;
&lt;/div&gt;
</content><category term="2015"></category><category term="psutil"></category><category term="travel"></category><category term="personal"></category><category term="python"></category></entry><entry><title>psutil 2.1.2 and Python wheels</title><link href="https://gmpy.dev/blog/2014/psutil-212-and-python-wheels" rel="alternate"></link><published>2014-09-21T00:00:00+02:00</published><updated>2014-09-21T00:00:00+02:00</updated><author><name>Giampaolo Rodola</name></author><id>tag:gmpy.dev,2014-09-21:/blog/2014/psutil-212-and-python-wheels</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="https://github.com/giampaolo/psutil/"&gt;psutil&lt;/a&gt; 2.1.2 is out. This release has been cooking for a while now, and that's because I've been travelling for the past 3 months between Spain, Japan and Germany. Hopefully I will be staying in Berlin for a while now, so I will have more time to dedicate …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a class="reference external" href="https://github.com/giampaolo/psutil/"&gt;psutil&lt;/a&gt; 2.1.2 is out. This release has been cooking for a while now, and that's because I've been travelling for the past 3 months between Spain, Japan and Germany. Hopefully I will be staying in Berlin for a while now, so I will have more time to dedicate to the project. The main new &amp;quot;feature&amp;quot; of this release is that other than the exe files, Windows users can now also benefit of &lt;a class="reference external" href="http://pythonwheels.com/"&gt;Python wheels&lt;/a&gt; (full story is &lt;a class="reference external" href="https://github.com/giampaolo/psutil/issues/505"&gt;here&lt;/a&gt;) which are available on PYPI. Frankly I don't know much about the new wheels packaging system but long story short is that Windows users can now install psutil via pip and therefore also include it as a dependency into requirements.txt. Other than this 2.1.2 can basically be considered a bug-fix release, including some important fixes amongst which:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/giampaolo/psutil/issues/506"&gt;#506&lt;/a&gt;: restored Python 2.4 compatibility&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/giampaolo/psutil/issues/340"&gt;#340&lt;/a&gt;: Process.get_open_files() no longer hangs on Windows (this was a very old and high-priority issue)&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/giampaolo/psutil/issues/501"&gt;#501&lt;/a&gt;: disk_io_counters() may return negative values on Windows&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/giampaolo/psutil/issues/504"&gt;#504&lt;/a&gt;: (Linux) couldn't build RPM packages via setup.py&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The list of all fixes can be found &lt;a class="reference external" href="https://github.com/giampaolo/psutil/blob/master/HISTORY.rst"&gt;here&lt;/a&gt;. For the next release I plan to drop support for Python 2.4 and 2.5 and hopefully network interfaces information similarly to &lt;a class="reference external" href="https://github.com/giampaolo/psutil/issues/376"&gt;ifconfig&lt;/a&gt;.&lt;/p&gt;
</content><category term="2014"></category><category term="psutil"></category><category term="wheels"></category><category term="travel"></category><category term="python"></category></entry></feed>