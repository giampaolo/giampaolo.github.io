<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Giampaolo Rodola - api-design</title><link href="https://gmpy.dev/" rel="alternate"></link><link href="https://gmpy.dev/feeds/atom.tag.api-design.xml" rel="self"></link><id>https://gmpy.dev/</id><updated>2014-01-11T00:00:00+01:00</updated><subtitle>Python enthusiast, core developer, psutil author</subtitle><entry><title>psutil 2.0 API redesign</title><link href="https://gmpy.dev/blog/2014/psutil-20-api-redesign" rel="alternate"></link><published>2014-01-11T00:00:00+01:00</published><updated>2014-01-11T00:00:00+01:00</updated><author><name>Giampaolo Rodola</name></author><id>tag:gmpy.dev,2014-01-11:/blog/2014/psutil-20-api-redesign</id><summary type="html">&lt;p&gt;This my second blog post is going to be about &lt;a class="reference external" href="https://github.com/giampaolo/psutil/"&gt;psutil&lt;/a&gt; 2.0, a major release in which I decided to reorganize the existing API for the sake of consistency. At the time of writing psutil 2.0 is still under development and the intent of this blog post is â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;This my second blog post is going to be about &lt;a class="reference external" href="https://github.com/giampaolo/psutil/"&gt;psutil&lt;/a&gt; 2.0, a major release in which I decided to reorganize the existing API for the sake of consistency. At the time of writing psutil 2.0 is still under development and the intent of this blog post is to serve as an official reference which describes how you should port your existent code base. In doing so I will also explain why I decided to make these changes. Despite many APIs will still be available as aliases pointing to the newer ones, the overall changes are numerous and many of them are not backward compatible. I'm sure many people will be sorely bitten but I think this is for the better and it needed to be done, hopefully for the first and last time. OK, here we go now.&lt;/p&gt;
&lt;div class="section" id="module-constants-turned-into-functions"&gt;
&lt;h2&gt;Module constants turned into functions&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;What changed&lt;/strong&gt;&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="42%" /&gt;
&lt;col width="58%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Old name&lt;/th&gt;
&lt;th class="head"&gt;Replacement&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;psutil.BOOT_TIME&lt;/td&gt;
&lt;td&gt;psutil.boot_time()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;psutil.NUM_CPUS&lt;/td&gt;
&lt;td&gt;psutil.cpu_count()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;psutil.TOTAL_PHYMEM&lt;/td&gt;
&lt;td&gt;psutil.virtual_memory().total&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Why I did it&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I already talked about this more extensively in this &lt;a class="reference external" href="../../2013/making-constants-part-of-your-api-is-evil/"&gt;blog post&lt;/a&gt;. In short: other than introducing unnecessary slowdowns, calculating a module level constant at import time is dangerous because in case of error the whole app will crash. Also, the represented values may be subject to change (think about the system clock) but the constant cannot be updated.
Thanks to this hack accessing the old constants still works and produces a DeprecationWarning.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="module-functions-renamings"&gt;
&lt;h2&gt;Module functions renamings&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;What changed&lt;/strong&gt;&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="44%" /&gt;
&lt;col width="56%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Old name&lt;/th&gt;
&lt;th class="head"&gt;Replacement&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;psutil.get_boot_time()&lt;/td&gt;
&lt;td&gt;psutil.boot_time()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;psutil.get_pid_list()&lt;/td&gt;
&lt;td&gt;psutil.pids()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;psutil.get_users()&lt;/td&gt;
&lt;td&gt;psutil.users()&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Why I did it&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;They were the only module level functions having a &lt;tt class="docutils literal"&gt;get_&lt;/tt&gt; prefix. All others do not.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="process-class-methods-renamings"&gt;
&lt;h2&gt;Process class' methods renamings&lt;/h2&gt;
&lt;p&gt;All methods lost their &lt;tt class="docutils literal"&gt;get_&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;set_&lt;/tt&gt; prefixes. A single method can now be used for both getting and setting (if a value is passed). Assuming p = psutil.Process():&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="46%" /&gt;
&lt;col width="54%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Old name&lt;/th&gt;
&lt;th class="head"&gt;Replacement&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;p.get_children()&lt;/td&gt;
&lt;td&gt;p.children()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;p.get_connections()&lt;/td&gt;
&lt;td&gt;p.connections()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;p.get_cpu_affinity()&lt;/td&gt;
&lt;td&gt;p.cpu_affinity()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;p.get_cpu_percent()&lt;/td&gt;
&lt;td&gt;p.cpu_percent()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;p.get_cpu_times()&lt;/td&gt;
&lt;td&gt;p.cpu_times()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;p.get_io_counters()&lt;/td&gt;
&lt;td&gt;p.io_counters()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;p.get_ionice()&lt;/td&gt;
&lt;td&gt;p.ionice()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;p.get_memory_info()&lt;/td&gt;
&lt;td&gt;p.memory_info()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;p.get_ext_memory_info()&lt;/td&gt;
&lt;td&gt;p.memory_info_ex()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;p.get_memory_maps()&lt;/td&gt;
&lt;td&gt;p.memory_maps()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;p.get_memory_percent()&lt;/td&gt;
&lt;td&gt;p.memory_percent()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;p.get_nice()&lt;/td&gt;
&lt;td&gt;p.nice()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;p.get_num_ctx_switches()&lt;/td&gt;
&lt;td&gt;p.num_ctx_switches()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;p.get_num_fds()&lt;/td&gt;
&lt;td&gt;p.num_fds()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;p.get_num_threads()&lt;/td&gt;
&lt;td&gt;p.num_threads()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;p.get_open_files()&lt;/td&gt;
&lt;td&gt;p.open_files()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;p.get_rlimit()&lt;/td&gt;
&lt;td&gt;p.rlimit()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;p.get_threads()&lt;/td&gt;
&lt;td&gt;p.threads()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;p.getcwd()&lt;/td&gt;
&lt;td&gt;p.cwd()&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;...as for set_* methods:&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="44%" /&gt;
&lt;col width="56%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Old name&lt;/th&gt;
&lt;th class="head"&gt;Replacement&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;p.set_cpu_affinity()&lt;/td&gt;
&lt;td&gt;p.cpu_affinity(cpus)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;p.set_ionice()&lt;/td&gt;
&lt;td&gt;p.ionice(ioclass, value=None)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;p.set_nice()&lt;/td&gt;
&lt;td&gt;p.nice(value)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;p.set_rlimit()&lt;/td&gt;
&lt;td&gt;p.rlimit(resource, limits=None)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Why I did it&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I wanted to be consistent with system-wide module level functions which have no &lt;tt class="docutils literal"&gt;get_&lt;/tt&gt; prefix. After I got rid of &lt;tt class="docutils literal"&gt;get_&lt;/tt&gt; prefixes removing also &lt;tt class="docutils literal"&gt;set_&lt;/tt&gt; seemed natural and helped diminish the number of methods.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="process-properties-are-now-methods"&gt;
&lt;h2&gt;Process properties are now methods&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;What changed&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Assuming p = psutil.Process():&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="44%" /&gt;
&lt;col width="56%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Old name&lt;/th&gt;
&lt;th class="head"&gt;Replacement&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;p.cmdline&lt;/td&gt;
&lt;td&gt;p.cmdline()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;p.create_time&lt;/td&gt;
&lt;td&gt;p.create_time()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;p.exe&lt;/td&gt;
&lt;td&gt;p.exe()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;p.gids&lt;/td&gt;
&lt;td&gt;p.gids()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;p.name&lt;/td&gt;
&lt;td&gt;p.name()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;p.parent&lt;/td&gt;
&lt;td&gt;p.parent()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;p.ppid&lt;/td&gt;
&lt;td&gt;p.ppid()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;p.status&lt;/td&gt;
&lt;td&gt;p.status()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;p.uids&lt;/td&gt;
&lt;td&gt;p.uids()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;p.username&lt;/td&gt;
&lt;td&gt;p.username()&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Why I did it&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Different reasons:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Having a mixed API which uses both properties and methods for no particular reason is confusing and messy as you don't know whether to use &amp;quot;()&amp;quot; or not (see &lt;a class="reference external" href="https://code.google.com/p/psutil/source/browse/test/test_psutil.py?name=release-0.7.0#1716"&gt;here&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;It is usually expected from a property to not perform many computations internally whereas psutil actually invokes a function every time it is accessed. This has two drawbacks:
* you may get an exception just by accessing the property (e.g. &amp;quot;p.name&amp;quot; may raise NoSuchProcess or AccessDenied)
* you may erroneously think properties are cached but this is true only for name, exe, and create_time.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="cpu-percent-intervals"&gt;
&lt;h2&gt;CPU percent intervals&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;What changed&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The timeout parameter of &lt;tt class="docutils literal"&gt;cpu_percent*&lt;/tt&gt; functions now defaults to 0.0 instead of 0.1. The functions affected are:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;psutil.Process.cpu_percent()&lt;/li&gt;
&lt;li&gt;psutil.cpu_percent()&lt;/li&gt;
&lt;li&gt;psutil.cpu_times_percent()&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Why I did it&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I originally set 0.1 as the default timeout because in order to get a meaningful percent value you need to wait some time.
Having an API which &amp;quot;sleeps&amp;quot; by default is risky though, because it's easy to forget it does so. That is particularly problematic when calling &lt;cite&gt;cpu_percent()&lt;/cite&gt; for all processes: it's very easy to forget about specifying &lt;cite&gt;timeout=0&lt;/cite&gt; resulting in dramatic slowdowns which are hard to spot. For example, this code snippet might take different seconds to complete depending on the number of active processes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="c1"&gt;# this will be slow&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;psutil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;process_iter&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cpu_percent&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="migration-strategy"&gt;
&lt;h2&gt;Migration strategy&lt;/h2&gt;
&lt;p&gt;Except for Process properties (&lt;cite&gt;name&lt;/cite&gt;, &lt;cite&gt;exe&lt;/cite&gt;, &lt;cite&gt;cmdline&lt;/cite&gt;, etc.) all the old APIs are still available as aliases pointing to the newer names and raising DeprecationWarning. psutil will be very clear on what you should use instead of the deprecated API as long you start the interpreter with the &amp;quot;-Wd&amp;quot; option. This will enable deprecation warnings which were &lt;a class="reference external" href="http://bugs.python.org/issue7319"&gt;silenced in Python 2.7&lt;/a&gt; (IMHO, from a developer standpoint this was a bad decision).&lt;/p&gt;
&lt;pre class="literal-block"&gt;
giampaolo&amp;#64;ubuntu:/tmp$ python -Wd
Python 2.7.3 (default, Sep 26 2013, 20:03:06)
[GCC 4.6.3] on linux2
Type &amp;quot;help&amp;quot;, &amp;quot;copyright&amp;quot;, &amp;quot;credits&amp;quot; or &amp;quot;license&amp;quot; for more information.
&amp;gt;&amp;gt;&amp;gt; import psutil
&amp;gt;&amp;gt;&amp;gt; psutil.get_pid_list()
__main__:1: DeprecationWarning: psutil.get_pid_list is deprecated; use psutil.pids() instead
[1, 2, 3, 6, 7, 13, ...]
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; p = psutil.Process()
&amp;gt;&amp;gt;&amp;gt; p.get_cpu_times()
__main__:1: DeprecationWarning: get_cpu_times() is deprecated; use cpu_times() instead
pcputimes(user=0.08, system=0.03)
&amp;gt;&amp;gt;&amp;gt;
&lt;/pre&gt;
&lt;p&gt;If you have a solid test suite you can run tests and fix the warnings one by one.
As for the the Process properties which were turned into methods it's more difficult because whereas psutil 1.2.1 returns the actual value, psutil 2.0.0 will return the bound method:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# psutil 1.2.1&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;psutil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Process&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;python&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;

&lt;span class="c1"&gt;# psutil 2.0.0&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;psutil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Process&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;bound&lt;/span&gt; &lt;span class="n"&gt;method&lt;/span&gt; &lt;span class="n"&gt;Process&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;psutil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;19816&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;python&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mi"&gt;139845631328144&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What I would recommend if you want to drop support with 1.2.1 is to grep for &lt;cite&gt;&amp;quot;.name&amp;quot;&lt;/cite&gt;, &lt;cite&gt;&amp;quot;.exe&amp;quot;&lt;/cite&gt; etc. and just replace them with &lt;cite&gt;&amp;quot;.exe()&amp;quot;&lt;/cite&gt; and &lt;cite&gt;&amp;quot;.name()&amp;quot;&lt;/cite&gt; one by one.
If on the other hand you want to write a code which works with both versions I see two possibilities:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;#1 check version info, like this:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;PSUTIL2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;psutil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;version_info&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;psutil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Process&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;PSUTIL2&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;exe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exe&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;PSUTIL2&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exe&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;#2 get rid of all &lt;cite&gt;&amp;quot;.name&amp;quot;&lt;/cite&gt;, &lt;cite&gt;&amp;quot;.exe&amp;quot;&lt;/cite&gt; occurrences you have in your code and use &lt;cite&gt;as_dict()&lt;/cite&gt; instead:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;psutil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Process&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;pinfo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;exe&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;pinfo&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;exe&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/usr/bin/python2.7&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;python&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pinfo&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;exe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pinfo&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;exe&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="new-features-introduced-in-2-0-0"&gt;
&lt;h2&gt;New features introduced in 2.0.0&lt;/h2&gt;
&lt;p&gt;Ok, enough with the bad news. =) psutil 2.0.0 is not only about code breakage. I also had the chance to integrate a bunch of interesting features.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://code.google.com/p/psutil/issues/detail?id=427"&gt;#427&lt;/a&gt;: you're now able to distinguish between the number of logical and physical CPUs:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;psutil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cpu_count&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;# logical&lt;/span&gt;
&lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;psutil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cpu_count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;logical&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# physical cores only&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://code.google.com/p/psutil/issues/detail?id=452"&gt;#452&lt;/a&gt;: process classes are now hashable and can be checked for equality. That means you can use &lt;cite&gt;Process&lt;/cite&gt; objects with sets (finally!).&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://code.google.com/p/psutil/issues/detail?id=447"&gt;#447&lt;/a&gt;: &lt;cite&gt;psutil.wait_procs()&lt;/cite&gt; &amp;quot;timeout&amp;quot; parameter is now optional&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://code.google.com/p/psutil/issues/detail?id=461"&gt;#461&lt;/a&gt;: functions returning namedtuples are now pickle-able&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://code.google.com/p/psutil/issues/detail?id=459"&gt;#459&lt;/a&gt;: a Makefile is now available to automatize repetitive tasks such as build, install, running tests etc. There's also a make.bat for Windows.&lt;/li&gt;
&lt;li&gt;introduced &lt;cite&gt;unittest2&lt;/cite&gt; module as a requirement for running tests&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="2014"></category><category term="psutil"></category><category term="api-design"></category><category term="python"></category></entry><entry><title>Making constants part of your API is evil</title><link href="https://gmpy.dev/blog/2013/making-constants-part-of-your-api-is-evil" rel="alternate"></link><published>2013-12-21T00:00:00+01:00</published><updated>2013-12-21T00:00:00+01:00</updated><author><name>Giampaolo Rodola</name></author><id>tag:gmpy.dev,2013-12-21:/blog/2013/making-constants-part-of-your-api-is-evil</id><summary type="html">&lt;p&gt;One of the initial features which were included in &lt;a class="reference external" href="https://github.com/giampaolo/psutil/"&gt;psutil&lt;/a&gt; since day one (5 years ago) were system's boot time, number of CPUs and total physical memory. These metrics have one thing in common: they are (apparently) not supposed to change over time. That is why we (me and &lt;a class="reference external" href="http://www.jayloden.com/"&gt;Jay â€¦&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;One of the initial features which were included in &lt;a class="reference external" href="https://github.com/giampaolo/psutil/"&gt;psutil&lt;/a&gt; since day one (5 years ago) were system's boot time, number of CPUs and total physical memory. These metrics have one thing in common: they are (apparently) not supposed to change over time. That is why we (me and &lt;a class="reference external" href="http://www.jayloden.com/"&gt;Jay&lt;/a&gt;) decided that exposing them as module constants calculated at import time was the way to go.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;psutil&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;psutil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NUM_CPUS&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;psutil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BOOT_TIME&lt;/span&gt;  &lt;span class="c1"&gt;# as seconds since the epoch&lt;/span&gt;
&lt;span class="mf"&gt;1387579049.799092&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;psutil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TOTAL_PHYMEM&lt;/span&gt;
&lt;span class="mi"&gt;8374120448&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;5 years later I regret that decision and I'm going to explain you why you don't want to do the same mistake.&lt;/p&gt;
&lt;div class="section" id="a-constant-should-not-change"&gt;
&lt;h2&gt;A constant should not change&lt;/h2&gt;
&lt;p&gt;When we think of  'constants', our expectations are that they should not change over time. It may be obvious, but before thinking about introducing a constant be absolutely sure the value it represents is going to remain the same.
Now, back then we thought these 3 metrics were not supposed to change, at least until the system is rebooted. Well, we were wrong: it turns out 2 of them actually can.
Apparently virtualized systems can change physical installed memory at runtime (see &lt;a class="reference external" href="https://code.google.com/p/psutil/issues/detail?id=140#c5"&gt;here&lt;/a&gt; and &lt;a class="reference external" href="http://technet.microsoft.com/en-us/library/hh831766.aspx"&gt;here&lt;/a&gt;) and system boot time can easily be altered every time you update the system clock.
In both of these cases, of course, the constants will not reflect the updated values.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="doing-things-at-import-time-is-dangerous"&gt;
&lt;h2&gt;Doing things at import time is dangerous&lt;/h2&gt;
&lt;p&gt;That's because import time usually means startup time and if something goes wrong the whole application will crash. In general the only reason for a module to crash at import time is because of a missing dependancy or because it's not supposed to run on that platform in the first place.
Now, here's a couple of bug reports which were collected over time: &lt;a class="reference external" href="https://code.google.com/p/psutil/issues/detail?id=188"&gt;issue 188&lt;/a&gt;, &lt;a class="reference external" href="https://code.google.com/p/psutil/issues/detail?id=133"&gt;issue 313&lt;/a&gt;.
The inconvenience was so severe that I had to release different fixed versions ASAP and the fix consisted of a &lt;a class="reference external" href="https://code.google.com/p/psutil/source/browse/psutil/_psosx.py?name=release-1.2.1#24"&gt;stinky workaround&lt;/a&gt;.
That's when I started thinking about getting rid of those constants once and for all and introduce functions instead. But how to do that without breaking everybody's code?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="backward-compatibility-matters"&gt;
&lt;h2&gt;Backward compatibility matters&lt;/h2&gt;
&lt;p&gt;Now here's the crucial part: every time you deliver a library to someone else you just cannot remove an API all of the sudden, especially if they are 3 and have been around since day one.
It should first be deprecated, possibly turned into an alias pointing to a newer API and finally be removed after 1 or 2 major releases. Also, you want the deprecated API to explicitly raise a DeprecationWarning informing the user he's relying on something which will eventually be removed. With a module constant you cannot do any of that. What you would need is a module property.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="module-properties"&gt;
&lt;h2&gt;Module properties&lt;/h2&gt;
&lt;p&gt;One of the greatest things about Python is that it's so dynamic that it lets you do all sort of nasty things with objects, including injecting names into modules (which are also objects) and make them behave like actual class properties!
For this I have to thank &lt;a class="reference external" href="http://www.dr-josiah.com/2013/12/properties-on-python-modules.html"&gt;Josiah Carlson&lt;/a&gt; who came up with this very simple yet effective solution:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ModuleWrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__repr__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;repr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_module&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="fm"&gt;__str__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="fm"&gt;__repr__&lt;/span&gt;

    &lt;span class="nd"&gt;@property&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;NUM_CPUS&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;NUM_CPUS constant is deprecated; use cpu_count() instead&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;warnings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;warn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;category&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="ne"&gt;DeprecationWarning&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stacklevel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;cpu_count&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="nd"&gt;@property&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;BOOT_TIME&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;BOOT_TIME constant is deprecated; &amp;quot;&lt;/span&gt; \
              &lt;span class="s2"&gt;&amp;quot;use get_boot_time() instead&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;warnings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;warn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;category&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="ne"&gt;DeprecationWarning&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stacklevel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;get_boot_time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="nd"&gt;@property&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;TOTAL_PHYMEM&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;TOTAL_PHYMEM constant is deprecated; &amp;quot;&lt;/span&gt; \
              &lt;span class="s2"&gt;&amp;quot;use virtual_memory().total instead&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;warnings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;warn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;category&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="ne"&gt;DeprecationWarning&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stacklevel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;virtual_memory&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;total&lt;/span&gt;

&lt;span class="n"&gt;mod&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ModuleWrapper&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;mod&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__dict__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;globals&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;mod&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_module&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;modules&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;modules&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mod&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can put this at the bottom of your module and you'll have fully working module constants (tested on Python from 2.4 to 3.4)!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;EDIT&lt;/strong&gt;: the only reason I applied this hack is to turn the old constants into aliases pointing to the newly introduced functions and produce a deprecation warning. That aside I can't think of a case where the use of a module property would be justified.&lt;/p&gt;
&lt;/div&gt;
</content><category term="2013"></category><category term="python"></category><category term="api-design"></category></entry></feed>