<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Giampaolo Rodola - wheels</title><link href="https://gmpy.dev/" rel="alternate"></link><link href="https://gmpy.dev/feeds/atom.tag.wheels.xml" rel="self"></link><id>https://gmpy.dev/</id><updated>2025-10-25T00:00:00+02:00</updated><subtitle>Python enthusiast, core developer, psutil author</subtitle><entry><title>Wheels for free-threaded Python now available in psutil</title><link href="https://gmpy.dev/blog/2025/wheels-for-free-threaded-python-now-available-in-psutil" rel="alternate"></link><published>2025-10-25T00:00:00+02:00</published><updated>2025-10-25T00:00:00+02:00</updated><author><name>Giampaolo Rodola</name></author><id>tag:gmpy.dev,2025-10-25:/blog/2025/wheels-for-free-threaded-python-now-available-in-psutil</id><summary type="html">&lt;p&gt;With the release of &lt;strong&gt;psutil 7.1.2&lt;/strong&gt;, wheels for free-threaded Python are now
available. This milestone was achieved largely through a &lt;strong&gt;community effort&lt;/strong&gt;,
as several internal refactorings to the C code were required to make it
possible (see &lt;a href="https://github.com/giampaolo/psutil/issues/2565#issuecomment-2910225647"&gt;issue #2565&lt;/a&gt;).
Many of these changes were contributed by &lt;a href="https://github.com/lysnikolaou"&gt;Lysandros
Nikolaou …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;With the release of &lt;strong&gt;psutil 7.1.2&lt;/strong&gt;, wheels for free-threaded Python are now
available. This milestone was achieved largely through a &lt;strong&gt;community effort&lt;/strong&gt;,
as several internal refactorings to the C code were required to make it
possible (see &lt;a href="https://github.com/giampaolo/psutil/issues/2565#issuecomment-2910225647"&gt;issue #2565&lt;/a&gt;).
Many of these changes were contributed by &lt;a href="https://github.com/lysnikolaou"&gt;Lysandros
Nikolaou&lt;/a&gt;.
Thanks to him for the effort and for bearing with me in code reviews! ;-)&lt;/p&gt;
&lt;h2&gt;What is free-threaded Python?&lt;/h2&gt;
&lt;p&gt;Free-threaded Python (available since &lt;strong&gt;Python 3.13&lt;/strong&gt;) refers to Python builds
that are compiled with the &lt;strong&gt;GIL (Global Interpreter Lock) disabled&lt;/strong&gt;, allowing
true parallel execution of Python bytecodes across multiple threads. This is
particularly beneficial for &lt;strong&gt;CPU-bound applications&lt;/strong&gt;, as it enables better
utilization of multi-core processors.&lt;/p&gt;
&lt;h2&gt;The state of free-threaded wheels&lt;/h2&gt;
&lt;p&gt;According to Hugo van Kemenade's &lt;a href="https://hugovk.github.io/free-threaded-wheels/"&gt;free-threaded wheels
tracker&lt;/a&gt;, the adoption of
free-threaded wheels among the &lt;strong&gt;top 360 most-downloaded PyPI packages with C
extensions&lt;/strong&gt; is still limited. Only &lt;strong&gt;128 out of these 360 packages&lt;/strong&gt; provide
wheels compiled for free-threaded Python, meaning they can run on Python builds
with the GIL disabled. This shows that, while progress has been made, most
popular packages with C extensions still do not offer ready-made wheels for
free-threaded Python.&lt;/p&gt;
&lt;h2&gt;What it means for users&lt;/h2&gt;
&lt;p&gt;When a library author provides a wheel, users can install a &lt;strong&gt;pre-compiled
binary package&lt;/strong&gt; without having to build it from source. This is especially
important for packages with &lt;strong&gt;C extensions&lt;/strong&gt;, like psutil, which is largely
written in C. Such packages often have complex build requirements and require
installing a C compiler. On Windows, that means installing &lt;strong&gt;Visual Studio&lt;/strong&gt; or
the Build Tools, which can take several gigabytes and a &lt;em&gt;significant&lt;/em&gt; setup
effort. Providing wheels spare users from this hassle, makes installation far
simpler, and is effectively &lt;strong&gt;essential for the users&lt;/strong&gt; of that package. You
basically &lt;code&gt;pip install psutil&lt;/code&gt; and you're done.&lt;/p&gt;
&lt;h2&gt;What it means for library authors&lt;/h2&gt;
&lt;p&gt;Currently, &lt;strong&gt;universal wheels for free-threaded Python do not exist&lt;/strong&gt;. Each
wheel must be built specifically for a Python version. Right now authors must
create separate wheels for Python 3.13 and 3.14. Which means distributing &lt;em&gt;a
lot&lt;/em&gt; of files already:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;psutil-7.1.2-cp313-cp313t-macosx_10_13_x86_64.whl
psutil-7.1.2-cp313-cp313t-macosx_11_0_arm64.whl
psutil-7.1.2-cp313-cp313t-manylinux2010_x86_64.manylinux_2_12_x86_64.manylinux_2_28_x86_64.whl
psutil-7.1.2-cp313-cp313t-manylinux2014_aarch64.manylinux_2_17_aarch64.manylinux_2_28_aarch64.whl
psutil-7.1.2-cp313-cp313t-win_amd64.whl
psutil-7.1.2-cp313-cp313t-win_arm64.whl
psutil-7.1.2-cp314-cp314t-macosx_10_15_x86_64.whl
psutil-7.1.2-cp314-cp314t-macosx_11_0_arm64.whl
psutil-7.1.2-cp314-cp314t-manylinux2010_x86_64.manylinux_2_12_x86_64.manylinux_2_28_x86_64.whl
psutil-7.1.2-cp314-cp314t-manylinux2014_aarch64.manylinux_2_17_aarch64.manylinux_2_28_aarch64.whl
psutil-7.1.2-cp314-cp314t-win_amd64.whl
psutil-7.1.2-cp314-cp314t-win_arm64.whl
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This also multiplies CI jobs and slows down the test matrix (see
&lt;a href="https://github.com/giampaolo/psutil/blob/7dfd0ed34fe70ffd879ae62d21aabd4a8ed06d6f/.github/workflows/build.yml"&gt;build.yml&lt;/a&gt;).
A &lt;strong&gt;true universal wheel&lt;/strong&gt; would greatly reduce this overhead, allowing a
single wheel to support multiple Python versions and platforms. Hopefully,
&lt;strong&gt;Python 3.15&lt;/strong&gt; will simplify this process. Two competing proposals, &lt;a href="https://www.python.org/dev/peps/pep-0803/"&gt;PEP
803&lt;/a&gt; and &lt;a href="https://www.python.org/dev/peps/pep-0809/"&gt;PEP
809&lt;/a&gt;, aim to standardize wheel
naming and metadata to allow producing &lt;strong&gt;a single wheel that covers multiple
Python versions&lt;/strong&gt;. That would drastically reduce distribution complexity for
library authors, and it's fair to say it's essential for free-threaded CPython
to truly succeed.&lt;/p&gt;
&lt;h2&gt;How to install free-threaded psutil&lt;/h2&gt;
&lt;p&gt;You can now install psutil for free-threaded Python directly via &lt;code&gt;pip&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pip&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;psutil&lt;span class="w"&gt; &lt;/span&gt;--only-binary&lt;span class="o"&gt;=&lt;/span&gt;:all:
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This ensures you get the &lt;strong&gt;pre-compiled wheels&lt;/strong&gt; without triggering a source
build.&lt;/p&gt;
&lt;h2&gt;External links&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/Python/comments/1ofrx8v/comment/nllztz6/"&gt;Reddit&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="2025"></category><category term="psutil"></category><category term="python"></category><category term="wheels"></category></entry><entry><title>psutil 2.1.2 and Python wheels</title><link href="https://gmpy.dev/blog/2014/psutil-212-and-python-wheels" rel="alternate"></link><published>2014-09-21T00:00:00+02:00</published><updated>2014-09-21T00:00:00+02:00</updated><author><name>Giampaolo Rodola</name></author><id>tag:gmpy.dev,2014-09-21:/blog/2014/psutil-212-and-python-wheels</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="https://github.com/giampaolo/psutil/"&gt;psutil&lt;/a&gt; 2.1.2 is out. This release has been cooking for a while now, and that's because I've been travelling for the past 3 months between Spain, Japan and Germany. Hopefully I will be staying in Berlin for a while now, so I will have more time to dedicate …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a class="reference external" href="https://github.com/giampaolo/psutil/"&gt;psutil&lt;/a&gt; 2.1.2 is out. This release has been cooking for a while now, and that's because I've been travelling for the past 3 months between Spain, Japan and Germany. Hopefully I will be staying in Berlin for a while now, so I will have more time to dedicate to the project. The main new &amp;quot;feature&amp;quot; of this release is that other than the exe files, Windows users can now also benefit of &lt;a class="reference external" href="http://pythonwheels.com/"&gt;Python wheels&lt;/a&gt; (full story is &lt;a class="reference external" href="https://github.com/giampaolo/psutil/issues/505"&gt;here&lt;/a&gt;) which are available on PYPI. Frankly I don't know much about the new wheels packaging system but long story short is that Windows users can now install psutil via pip and therefore also include it as a dependency into requirements.txt. Other than this 2.1.2 can basically be considered a bug-fix release, including some important fixes amongst which:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/giampaolo/psutil/issues/506"&gt;#506&lt;/a&gt;: restored Python 2.4 compatibility&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/giampaolo/psutil/issues/340"&gt;#340&lt;/a&gt;: &lt;cite&gt;Process.get_open_files()&lt;/cite&gt; no longer hangs on Windows (this was a very old and high-priority issue)&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/giampaolo/psutil/issues/501"&gt;#501&lt;/a&gt;: &lt;cite&gt;disk_io_counters()&lt;/cite&gt; may return negative values on Windows&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/giampaolo/psutil/issues/504"&gt;#504&lt;/a&gt;: (Linux) couldn't build RPM packages via setup.py&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The list of all fixes can be found &lt;a class="reference external" href="https://github.com/giampaolo/psutil/blob/master/HISTORY.rst"&gt;here&lt;/a&gt;. For the next release I plan to drop support for Python 2.4 and 2.5 and hopefully network interfaces information similarly to &lt;a class="reference external" href="https://github.com/giampaolo/psutil/issues/376"&gt;ifconfig&lt;/a&gt;.&lt;/p&gt;
</content><category term="2014"></category><category term="psutil"></category><category term="wheels"></category><category term="travel"></category><category term="python"></category></entry></feed>