<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Giampaolo Rodola - rant</title><link href="https://gmpy.dev/" rel="alternate"></link><link href="https://gmpy.dev/feeds/atom.tag.rant.xml" rel="self"></link><id>https://gmpy.dev/</id><updated>2014-05-26T00:00:00+02:00</updated><subtitle>Python enthusiast, core developer, psutil author</subtitle><entry><title>Goodbye Google Code, I am moving to GitHub</title><link href="https://gmpy.dev/blog/2014/goodbye-google-code-i-am-moving-to-github" rel="alternate"></link><published>2014-05-26T00:00:00+02:00</published><updated>2014-05-26T00:00:00+02:00</updated><author><name>Giampaolo Rodola</name></author><id>tag:gmpy.dev,2014-05-26:/blog/2014/goodbye-google-code-i-am-moving-to-github</id><summary type="html">&lt;p&gt;8 years ago I started hosting my first open source project (&lt;a class="reference external" href="https://code.google.com/p/pyftpdlib/"&gt;pyftpdlib&lt;/a&gt;) on Google Code and I later ended up also hosting &lt;a class="reference external" href="https://code.google.com/p/psutil/"&gt;psutil&lt;/a&gt; and &lt;a class="reference external" href="https://code.google.com/p/pysendfile/"&gt;pysendfile&lt;/a&gt;. Back then GC had just been released and similarly to other Google products I appreciated the clean and minimalistic interface, the excellent bug tracker and …&lt;/p&gt;</summary><content type="html">&lt;p&gt;8 years ago I started hosting my first open source project (&lt;a class="reference external" href="https://code.google.com/p/pyftpdlib/"&gt;pyftpdlib&lt;/a&gt;) on Google Code and I later ended up also hosting &lt;a class="reference external" href="https://code.google.com/p/psutil/"&gt;psutil&lt;/a&gt; and &lt;a class="reference external" href="https://code.google.com/p/pysendfile/"&gt;pysendfile&lt;/a&gt;. Back then GC had just been released and similarly to other Google products I appreciated the clean and minimalistic interface, the excellent bug tracker and the freedom to choose between different revision control systems (SVN, GIT and Mercurial, which is my favourite one). Unfortunately as the years passed Google completely lost interest in maintaining GC to the point that now GC can basically be considered an &lt;a class="reference external" href="https://groups.google.com/forum/#!topic/google-code-hosting/PEhNMdtBGt4"&gt;abandoned project&lt;/a&gt;.  If you take a look at &lt;a class="reference external" href="https://code.google.com/p/support/issues/list"&gt;GC bug tracker&lt;/a&gt; you can see literally hundreds of issues which have been open for years, even some apparently easy ones such as &lt;a class="reference external" href="https://code.google.com/p/support/issues/detail?id=60"&gt;#60&lt;/a&gt; and &lt;a class="reference external" href="https://code.google.com/p/support/issues/detail?id=919"&gt;#919&lt;/a&gt;. The lack of interest from Google is absolutely astonishing and it is the main reason why I ultimately decided to change. After at least a couple of years of thinking about migrating to github I finally bite the bullet and as of today psutil is now &lt;a class="reference external" href="https://github.com/giampaolo/psutil"&gt;hosted on github&lt;/a&gt; (update: now also &lt;a class="reference external" href="https://github.com/giampaolo/pyftpdlib"&gt;pyftpdlib&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/giampaolo/pysendfile"&gt;pysendfile&lt;/a&gt;).&lt;/p&gt;
&lt;div class="section" id="what-i-will-miss-the-most-about-gc"&gt;
&lt;h2&gt;What I will miss the most about GC&lt;a class="headerlink" href="#what-i-will-miss-the-most-about-gc" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;First of all I must say that despite the unfortunate situation of GC I'm also sad for abandoning it. It started as a really great hosting platform, and it still has some peculiar aspects which I know I will be missing. In order of importance:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://code.google.com/p/psutil/issues/list"&gt;The bug tracker&lt;/a&gt;: it is much more powerful than &lt;a class="reference external" href="https://github.com/giampaolo/psutil/issues?state=open"&gt;github's&lt;/a&gt;, especially for the extremely customizable labeling system which is pure gold, the excellent searching system and the &lt;a class="reference external" href="https://code.google.com/p/psutil/issues/list?can=2&amp;amp;q=&amp;amp;colspec=ID+Summary+Type+Opsys+Status+Priority+Opened+Owner&amp;amp;groupby=&amp;amp;sort=&amp;amp;x=&amp;amp;y=&amp;amp;cells=tiles&amp;amp;mode=grid"&gt;grid view&lt;/a&gt;. GC bug tracker seriously kicks some ass so kudos to whoever was behind its design! By comparison github bug tracker is too minimalistic and it has no good way to order issues or list them in a more compact form. I'm totally gonna miss psutil bug tracker.&lt;/li&gt;
&lt;li&gt;Mercurial: I'm a big fan of Mercurial and I consider it way more pleasant to work with &lt;a class="reference external" href="https://twitter.com/grodola/status/456238397690875905"&gt;compared to GIT&lt;/a&gt;. I don't know exactly why GIT ended up being so much more used than Mercurial (probably because of github?) but I'm sure that many other guys like me who know both systems will agree that Mercurial is simply so much easier to use. Unfortunately once you decide to stick with github you have no other choice. Mercurial, I'm gonna miss you too!&lt;/li&gt;
&lt;li&gt;GC layout: it is much simpler than github's! Everything is easy to find, even for a non-geek person. The home page alone is perfect to summarize what the project is about and doesn't have tens of icons all over the place. github layout is &lt;a class="reference external" href="https://twitter.com/JoshHelfferich/status/423680220126650368"&gt;more complicated&lt;/a&gt; and needs some time to get used to, even for a programmer. If these projects (psutil and others) weren't about programming I wouldn't have chosen github because it's &amp;quot;not for the masses&amp;quot;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="what-i-appreciate-about-github"&gt;
&lt;h2&gt;What I appreciate about github&lt;a class="headerlink" href="#what-i-appreciate-about-github" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Travis integration: there's this totally awesome free continuos integration service called &lt;a class="reference external" href="https://travis-ci.org/giampaolo/psutil"&gt;Travis&lt;/a&gt; which given a configuration file &lt;a class="reference external" href="https://github.com/giampaolo/psutil/blob/master/.travis.yml"&gt;like this&lt;/a&gt; it will automatically run tests on multiple python versions every time a commit is pushed. They recently added &lt;a class="reference external" href="http://blog.travis-ci.com/2014-05-13-multi-os-feature-available/"&gt;OSX support&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/travis-ci/travis-ci/issues/216"&gt;Windows support&lt;/a&gt; is on the way. This way I will finally be able to quickly test psutil on Linux, OSX and Windows without using virtualized systems except for FreeBSD and Solaris! To me this is like the ultimate Christmas gift and I couldn't ask for any better. Note: as of today Travis only works with github.&lt;/li&gt;
&lt;li&gt;forks and pull requests: honestly I'm not a big fan of them (yet?), probably because I'm used to the python-dev development workflow consisting in uploading patches on the bug tracker and reviewing them (see &lt;a class="reference external" href="http://bugs.python.org/issue17552"&gt;this&lt;/a&gt; for example). Nevertheless to my understanding most people use pull requests in order to contribute to open source projects so basically this is a service I'm glad to offer to my users who hopefully will be able to contribute back more easily. GC has a &lt;a class="reference external" href="https://code.google.com/p/psutil/source/clones"&gt;cloning system&lt;/a&gt; but isn't anywhere near github's and I'm not even sure how it works (never cared).&lt;/li&gt;
&lt;li&gt;the &amp;quot;social&amp;quot; side of github including the fact that you can &amp;quot;star&amp;quot; developers and receive notifications about their activity was another big incentive for migrating. The &lt;a class="reference external" href="https://github.com/giampaolo"&gt;personal landing page&lt;/a&gt; collecting all your contributions to different projects is absolutely cool. GC had something similar but they stupidly &lt;a class="reference external" href="https://code.google.com/p/support/issues/detail?id=24324"&gt;removed it&lt;/a&gt; all of the sudden and never reintroduced it back. &lt;a class="reference external" href="https://groups.google.com/forum/#!topic/google-code-hosting/0XbdStxE_uw"&gt;A lot of people were angry&lt;/a&gt; but again, they didn't care. Actually this was the feature I appreciated the most about GC after the bug tracker and that is when I seriously started thinking about flipping off GC for good.&lt;/li&gt;
&lt;li&gt;the enormous user base: the fact that github is the most used code hosting platform out there will hopefully help me and my projects have a little more visibility. Also, in many job interviews I've been asked what my github profile was so it seems github also became an active part in getting jobs.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://gist.github.com/"&gt;gists&lt;/a&gt;: gists are &amp;quot;a simple way to share code snippets and pastes with others. All gists are Git repositories, so they are automatically versioned, forkable and usable from Git&amp;quot;. Seriously, they are  beautiful. In order to share &lt;a class="reference external" href="https://code.activestate.com/recipes/users/4178764/"&gt;my code snippets&lt;/a&gt; I've always used Active State but I think I will eventually migrate them as well in order to have everything in one place.&lt;/li&gt;
&lt;li&gt;the fact that if you mention an issue number as part of your commit message that specific issue will automatically be updated. As I said GC bug tracker is superior in basically any aspect but since I always took care of updating issues by mentioning the specific cset which fixed them (see for example &lt;a class="reference external" href="https://code.google.com/p/psutil/issues/detail?id=463"&gt;here&lt;/a&gt;) having this little extra feature will save me some time.&lt;/li&gt;
&lt;li&gt;SSH keys: using Mercurial on GC means using password based authentication. Incredibly they still do not support SSH key based auth. Simply &amp;quot;git push&amp;quot;ing without entering any password when I'm not on my laptop is nice, and of course, it is also much more secure.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="migration"&gt;
&lt;h2&gt;Migration&lt;a class="headerlink" href="#migration" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For those of you who are interested in knowing how I did it, here goes: as for moving the issue from GC bug tracker to github's I used &lt;a class="reference external" href="https://github.com/arthur-debert/google-code-issues-migrator"&gt;this tool&lt;/a&gt;. I managed to preserve the issue IDs but unfortunately not the real owners nor the real issue dates, which kind of sucks. As for migrating the code from mercurial to git I just used &lt;a class="reference external" href="http://stackoverflow.com/a/16037861/376587"&gt;this&lt;/a&gt;. The Mercurial -&amp;gt; GIT transition was perfect and I also managed to preserve the original Mercurial named branches and tags, which for me it was crucial. In conclusion, psutil is a 5 years, medium sized  project with hundreds of issues: the transition in this case is definitively possible but not painless so if you plan on migrating, the sooner you do it the better.&lt;/p&gt;
&lt;/div&gt;
</content><category term="2014"></category><category term="rant"></category></entry></feed>