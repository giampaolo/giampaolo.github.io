<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Giampaolo Rodola - memory</title><link href="https://gmpy.dev/" rel="alternate"></link><link href="https://gmpy.dev/feeds/atom.tag.memory.xml" rel="self"></link><id>https://gmpy.dev/</id><updated>2016-10-23T00:00:00+02:00</updated><subtitle>Python enthusiast, core developer, psutil author</subtitle><entry><title>psutil 4.4.0: improved Linux memory metrics</title><link href="https://gmpy.dev/blog/2016/psutil-440-improved-linux-memory-metrics" rel="alternate"></link><published>2016-10-23T00:00:00+02:00</published><updated>2016-10-23T00:00:00+02:00</updated><author><name>Giampaolo Rodola</name></author><id>tag:gmpy.dev,2016-10-23:/blog/2016/psutil-440-improved-linux-memory-metrics</id><summary type="html">&lt;p&gt;OK, here's another &lt;a class="reference external" href="https://github.com/giampaolo/psutil"&gt;psutil&lt;/a&gt; release. Main highlights of this release are more accurate memory metrics on Linux and different OSX fixes. Here goes.&lt;/p&gt;
&lt;div class="section" id="linux-virtual-memory"&gt;
&lt;h2&gt;Linux virtual memory&lt;/h2&gt;
&lt;p&gt;This new release sets a milestone regarding &lt;tt class="docutils literal"&gt;virtual_memory()&lt;/tt&gt; metrics on Linux which are now calculated way &lt;a class="reference external" href="https://github.com/giampaolo/psutil/issues/887"&gt;more precisely&lt;/a&gt; (see &lt;a class="reference external" href="https://github.com/giampaolo/psutil/pull/890/files"&gt;commit&lt;/a&gt;). Across the years different â€¦&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;OK, here's another &lt;a class="reference external" href="https://github.com/giampaolo/psutil"&gt;psutil&lt;/a&gt; release. Main highlights of this release are more accurate memory metrics on Linux and different OSX fixes. Here goes.&lt;/p&gt;
&lt;div class="section" id="linux-virtual-memory"&gt;
&lt;h2&gt;Linux virtual memory&lt;/h2&gt;
&lt;p&gt;This new release sets a milestone regarding &lt;tt class="docutils literal"&gt;virtual_memory()&lt;/tt&gt; metrics on Linux which are now calculated way &lt;a class="reference external" href="https://github.com/giampaolo/psutil/issues/887"&gt;more precisely&lt;/a&gt; (see &lt;a class="reference external" href="https://github.com/giampaolo/psutil/pull/890/files"&gt;commit&lt;/a&gt;). Across the years different people complained that the numbers reported by virtual_memory() were not accurate or did not match the ones reported by &amp;quot;free&amp;quot; command line utility exactly (see &lt;a class="reference external" href="https://github.com/giampaolo/psutil/issues/862"&gt;#862&lt;/a&gt;, &lt;a class="reference external" href="https://github.com/giampaolo/psutil/issues/685"&gt;#685&lt;/a&gt;, &lt;a class="reference external" href="https://github.com/giampaolo/psutil/issues/538"&gt;#538&lt;/a&gt;). As such I investigated how &amp;quot;available memory&amp;quot; is calculated on Linux and indeed psutil were doing it wrong. It turns out &amp;quot;free&amp;quot; cmdline itself, and many other similar tools, also did it wrong up until &lt;a class="reference external" href="https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=34e431b0ae398fc54ea69ff85ec700722c9da773"&gt;2 years ago&lt;/a&gt; when somebody finally decided to accurately calculate the available system memory straight into the Linux kernel and expose this info to user-level applications. Starting from Linux kernel 3.14, a new &amp;quot;MemAvailable&amp;quot; column was added to /proc/meminfo and this is how psutil now determines available memory. Because of this both &amp;quot;available&amp;quot; and &amp;quot;used&amp;quot; memory fields returned by virtual_memory() precisely match &amp;quot;free&amp;quot; command line utility. As for older kernels (&amp;lt; 3.14), psutil tries to determine this value by using the &lt;a class="reference external" href="https://github.com/giampaolo/psutil/blob/a5beb29488fe75c858d30a00044cbd29d3ed3d8b/psutil/_pslinux.py#L291"&gt;same algorithm&lt;/a&gt; which was used in the original &lt;a class="reference external" href="https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=34e431b0ae398fc54ea69ff85ec700722c9da773"&gt;Linux kernel commit&lt;/a&gt;. Free cmdline utility source code also inspired an additional fix which prevents available memory overflowing total memory on &lt;a class="reference external" href="https://github.com/giampaolo/psutil/blob/a5beb29488fe75c858d30a00044cbd29d3ed3d8b/psutil/_pslinux.py#L435"&gt;LCX containers&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="osx-fixes"&gt;
&lt;h2&gt;OSX fixes&lt;/h2&gt;
&lt;p&gt;For many years the OSX development of psutil occurred on a very old OSX 10.5 version, which I emulated via VirtualBox. The OS itself was a hacked version of OSX, called iDeneb. After many years I finally managed to get access to a more recent version of OSX (El Captain) thanks to VirtualBox + Vagrant. With this I finally had the chance to address many long standing OSX bugs. Here's the list:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/giampaolo/psutil/issues/514"&gt;514&lt;/a&gt;: fix &lt;tt class="docutils literal"&gt;Process.memory_maps()&lt;/tt&gt; segfault (critical!).&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/giampaolo/psutil/issues/783"&gt;783&lt;/a&gt;: &lt;tt class="docutils literal"&gt;Process.status()&lt;/tt&gt; may erroneously return &amp;quot;running&amp;quot; for zombie processes.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/giampaolo/psutil/issues/908"&gt;908&lt;/a&gt;: different process methods could erroneously mask the real error for high-privileged PIDs and raise NoSuchProcess and &lt;tt class="docutils literal"&gt;AccessDenied&lt;/tt&gt; instead of &lt;tt class="docutils literal"&gt;OSError&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;RuntimeError&lt;/tt&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/giampaolo/psutil/issues/909"&gt;909&lt;/a&gt;: &lt;tt class="docutils literal"&gt;Process.open_files()&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;Process.connections()&lt;/tt&gt; methods may raise &lt;tt class="docutils literal"&gt;OSError&lt;/tt&gt; with no exception set if process is gone.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/giampaolo/psutil/issues/916"&gt;916&lt;/a&gt;: fix many compilation warnings.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="improved-procinfo-py-script"&gt;
&lt;h2&gt;Improved procinfo.py script&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/giampaolo/psutil/blob/master/scripts/procinfo.py"&gt;procinfo.py&lt;/a&gt; is a script which shows psutil capabilities regarding obtaining different info about processes. I improved it so that now it reports a lot more info. Here's a sample output:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ python scripts/procinfo.py
pid           4600
name          chrome
parent        4554 (bash)
exe           /opt/google/chrome/chrome
cwd           /home/giampaolo
cmdline       /opt/google/chrome/chrome
started       2016-09-19 11:12
cpu-tspent    27:27.68
cpu-times     user=8914.32, system=3530.59,
              children_user=1.46, children_system=1.31
cpu-affinity  [0, 1, 2, 3, 4, 5, 6, 7]
memory        rss=520.5M, vms=1.9G, shared=132.6M, text=95.0M, lib=0B,
              data=816.5M, dirty=0B
memory %      3.26
user          giampaolo
uids          real=1000, effective=1000, saved=1000
uids          real=1000, effective=1000, saved=1000
terminal      /dev/pts/2
status        sleeping
nice          0
ionice        class=IOPriority.IOPRIO_CLASS_NONE, value=0
num-threads   47
num-fds       379
I/O           read_count=96.6M, write_count=80.7M,
              read_bytes=293.2M, write_bytes=24.5G
ctx-switches  voluntary=30426463, involuntary=460108
children      PID    NAME
              4605   cat
              4606   cat
              4609   chrome
              4669   chrome
open-files    PATH
              /opt/google/chrome/icudtl.dat
              /opt/google/chrome/snapshot_blob.bin
              /opt/google/chrome/natives_blob.bin
              /opt/google/chrome/chrome_100_percent.pak
              [...]
connections   PROTO LOCAL ADDR            REMOTE ADDR               STATUS
              UDP   10.0.0.3:3693         *:*                       NONE
              TCP   10.0.0.3:55102        172.217.22.14:443         ESTABLISHED
              UDP   10.0.0.3:35172        *:*                       NONE
              TCP   10.0.0.3:32922        172.217.16.163:443        ESTABLISHED
              UDP   :::5353               *:*                       NONE
              UDP   10.0.0.3:59925        *:*                       NONE
threads       TID              USER          SYSTEM
              11795             0.7            1.35
              11796            0.68            1.37
              15887            0.74            0.03
              19055            0.77            0.01
              [...]
              total=47
res-limits    RLIMIT                     SOFT       HARD
              virtualmem             infinity   infinity
              coredumpsize                  0   infinity
              cputime                infinity   infinity
              datasize               infinity   infinity
              filesize               infinity   infinity
              locks                  infinity   infinity
              memlock                   65536      65536
              msgqueue                 819200     819200
              nice                          0          0
              openfiles                  8192      65536
              maxprocesses              63304      63304
              rss                    infinity   infinity
              realtimeprio                  0          0
              rtimesched             infinity   infinity
              sigspending               63304      63304
              stack                   8388608   infinity
mem-maps      RSS      PATH
              381.4M   [anon]
              62.8M    /opt/google/chrome/chrome
              15.8M    /home/giampaolo/.config/google-chrome/Default/History
              6.6M     /home/giampaolo/.config/google-chrome/Default/Favicons
              [...]
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="nic-netmask-on-windows"&gt;
&lt;h2&gt;NIC netmask on Windows&lt;/h2&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;net_if_addrs()&lt;/tt&gt; on Windows is now able to return the netmask.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="other-improvements-and-bug-fixes"&gt;
&lt;h2&gt;Other improvements and bug fixes&lt;/h2&gt;
&lt;p&gt;Just take a look at the &lt;a class="reference external" href="https://github.com/giampaolo/psutil/blob/master/HISTORY.rst#440---2016-10-23"&gt;HISTORY&lt;/a&gt; file.&lt;/p&gt;
&lt;/div&gt;
</content><category term="2016"></category><category term="psutil"></category><category term="memory"></category><category term="python"></category></entry><entry><title>Real process memory and environ in Python</title><link href="https://gmpy.dev/blog/2016/real-process-memory-and-environ-in-python" rel="alternate"></link><published>2016-02-17T00:00:00+01:00</published><updated>2016-02-17T00:00:00+01:00</updated><author><name>Giampaolo Rodola</name></author><id>tag:gmpy.dev,2016-02-17:/blog/2016/real-process-memory-and-environ-in-python</id><summary type="html">&lt;p&gt;New psutil 4.0.0 is out, with some interesting news about process memory metrics. I'll just get straight to the point and describe what's new.&lt;/p&gt;
&lt;div class="section" id="real-process-memory-info"&gt;
&lt;h2&gt;&amp;quot;Real&amp;quot; process memory info&lt;/h2&gt;
&lt;p&gt;Determining how much memory a process &lt;strong&gt;really&lt;/strong&gt; uses is not an easy matter (see &lt;a class="reference external" href="https://lwn.net/Articles/230975/"&gt;this&lt;/a&gt; and &lt;a class="reference external" href="http://bmaurer.blogspot.it/2006/03/memory-usage-with-smaps.html"&gt;this&lt;/a&gt;). RSS (Resident Set â€¦&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;New psutil 4.0.0 is out, with some interesting news about process memory metrics. I'll just get straight to the point and describe what's new.&lt;/p&gt;
&lt;div class="section" id="real-process-memory-info"&gt;
&lt;h2&gt;&amp;quot;Real&amp;quot; process memory info&lt;/h2&gt;
&lt;p&gt;Determining how much memory a process &lt;strong&gt;really&lt;/strong&gt; uses is not an easy matter (see &lt;a class="reference external" href="https://lwn.net/Articles/230975/"&gt;this&lt;/a&gt; and &lt;a class="reference external" href="http://bmaurer.blogspot.it/2006/03/memory-usage-with-smaps.html"&gt;this&lt;/a&gt;). RSS (Resident Set Size), which is what most people usually rely on, is misleading because it includes both the memory which is unique to the process and the memory shared with other processes. What would be more interesting in terms of profiling is the memory which would be freed if the process was terminated &lt;strong&gt;right now&lt;/strong&gt;. In the Linux world this is called USS (Unique Set Size), and this is the major feature which was introduced in psutil 4.0.0 (not only for Linux but also for Windows and OSX).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="uss-memory"&gt;
&lt;h2&gt;USS memory&lt;/h2&gt;
&lt;p&gt;The USS (Unique Set Size) is the memory which is unique to a process and which would be freed if the process was terminated right now. On Linux this can be determined by parsing all the &amp;quot;private&amp;quot; blocks in /proc/pid/smaps. The Firefox team pushed this further and managed to do the same also on &lt;a class="reference external" href="https://dxr.mozilla.org/mozilla-central/rev/aa90f482e16db77cdb7dea84564ea1cbd8f7f6b3/xpcom/base/nsMemoryReporterManager.cpp"&gt;OSX and Windows&lt;/a&gt;, which is great. New version of psutil is now able to do the same:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;psutil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Process&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;memory_full_info&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;pfullmem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rss&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;101990&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vms&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;521888&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;shared&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;38804&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;28200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;59672&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dirty&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;uss&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;81623&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pss&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;91788&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;swap&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="pss-and-swap"&gt;
&lt;h2&gt;PSS and swap&lt;/h2&gt;
&lt;p&gt;On Linux there are two additional metrics which can also be determined via /proc/pid/smaps: PSS and swap. PSS, aka &amp;quot;Proportional Set Size&amp;quot;, represents the amount of memory shared with other processes, accounted in a way that the amount is divided evenly between the processes that share it. I.e. if a process has 10 MBs all to itself (USS) and 10 MBs shared with another process, its PSS will be 15 MBs. &amp;quot;swap&amp;quot; is simply the amount of memory that has been swapped out to disk. With memory_full_info() it is possible to implement a tool &lt;a class="reference external" href="https://github.com/giampaolo/psutil/blob/master/scripts/procsmem.py"&gt;like this&lt;/a&gt;, similar to &lt;a class="reference external" href="https://www.selenic.com/smem/"&gt;smem&lt;/a&gt; on Linux, which provides a list of processes sorted by &amp;quot;USS&amp;quot;. It is interesting to notice how RSS differs from USS:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
~/svn/psutil$ ./scripts/procsmem.py
PID     User    Cmdline                            USS     PSS    Swap     RSS
==============================================================================
...
3986    giampao /usr/bin/python3 /usr/bin/indi   15.3M   16.6M      0B   25.6M
3906    giampao /usr/lib/ibus/ibus-ui-gtk3       17.6M   18.1M      0B   26.7M
3991    giampao python /usr/bin/hp-systray -x    19.0M   23.3M      0B   40.7M
3830    giampao /usr/bin/ibus-daemon --daemoni   19.0M   19.0M      0B   21.4M
20529   giampao /opt/sublime_text/plugin_host    19.9M   20.1M      0B   22.0M
3990    giampao nautilus -n                      20.6M   29.9M      0B   50.2M
3898    giampao /usr/lib/unity/unity-panel-ser   27.1M   27.9M      0B   37.7M
4176    giampao /usr/lib/evolution/evolution-c   35.7M   36.2M      0B   41.5M
20712   giampao /usr/bin/python -B /home/giamp   45.6M   45.9M      0B   49.4M
3880    giampao /usr/lib/x86_64-linux-gnu/hud/   51.6M   52.7M      0B   61.3M
20513   giampao /opt/sublime_text/sublime_text   65.8M   73.0M      0B   87.9M
3976    giampao compiz                          115.0M  117.0M      0B  130.9M
32486   giampao skype                           145.1M  147.5M      0B  149.6M
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="implementation"&gt;
&lt;h2&gt;Implementation&lt;/h2&gt;
&lt;p&gt;In order to get these values (USS, PSS and swap) we need to pass through the whole process address space. This usually requires higher user privileges and is considerably slower than getting the &amp;quot;usual&amp;quot; memory metrics via Process.memory_info(), which is probably the reason why tools like ps and top show RSS/VMS instead of USS. A big thanks goes to the Mozilla team which figured out all this stuff on Windows and OSX, and to Eric Rahm who put the PRs for psutil together (see #744, #745 and #746). For those of you who don't use Python and would like to port the code on other languages here's the interesting parts:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/giampaolo/psutil/blob/42b34049cf96e845b6423db91f991849a2f87578/psutil/_pslinux.py#L1026"&gt;Linux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/giampaolo/psutil/blob/50fd31a4eaca3e24905b96d587fd08bcf313fc6b/psutil/_psutil_osx.c#L568"&gt;OSX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/giampaolo/psutil/blob/50fd31a4eaca3e24905b96d587fd08bcf313fc6b/psutil/_psutil_windows.c#L811"&gt;Windows&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="memory-type-percent"&gt;
&lt;h2&gt;Memory type percent&lt;/h2&gt;
&lt;p&gt;After &lt;a class="reference external" href="https://github.com/giampaolo/psutil/pull/744#issuecomment-180054438"&gt;reorganizing process memory APIs&lt;/a&gt; I decided to add a new memtype parameter to Process.memory_percent(). With this it is now possible to compare a specific memory type (not only RSS) against the total physical memory. E.g.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;psutil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Process&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;memory_percent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;memtype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pss&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mf"&gt;0.06877466326787016&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="process-environ"&gt;
&lt;h2&gt;Process environ&lt;/h2&gt;
&lt;p&gt;Second biggest improvement in psutil 4.0.0 is the ability to determine the process environment variables. This opens interesting possibilities about process recognition and monitoring techniques. For instance, one might start a process by passing a certain custom environment variable, then iterate over all processes to find the one of interest (and figure out whether it's running or whatever):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;psutil&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;psutil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;process_iter&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;env&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;psutil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;MYAPP&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Process environ was a &lt;a class="reference external" href="https://code.google.com/archive/p/psutil/issues/52"&gt;long standing issue&lt;/a&gt; (year 2009) who I gave up to implement because the Windows implementation worked for the current process only. Frank Benkstein &lt;a class="reference external" href="https://github.com/giampaolo/psutil/pull/747"&gt;solved that&lt;/a&gt; and the process environ can now be determined on Linux, Windows and OSX for all processes (of course you may still bump into AccessDenied for processes owned by another user):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;psutil&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pprint&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;pprint&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;pp&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;pp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;psutil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Process&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;CLUTTER_IM_MODULE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;xim&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;COLORTERM&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;gnome-terminal&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;COMPIZ_BIN_PATH&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/usr/bin/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;HOME&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/home/giampaolo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;PWD&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/home/giampaolo/svn/psutil&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It must be noted that the resulting dict usually does not reflect changes made after the process started (e.g. &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;os.environ['MYAPP']&lt;/span&gt; = '1'&lt;/tt&gt;). Again, for whoever is interested in doing this in other languages, here's the interesting parts:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/giampaolo/psutil/blob/50fd31a4eaca3e24905b96d587fd08bcf313fc6b/psutil/_pslinux.py#L928"&gt;Linux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/giampaolo/psutil/blob/50fd31a4eaca3e24905b96d587fd08bcf313fc6b/psutil/arch/osx/process_info.c#L241"&gt;OSX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/giampaolo/psutil/pull/747"&gt;Windows&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="extended-disk-io-stats"&gt;
&lt;h2&gt;Extended disk IO stats&lt;/h2&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;psutil.disk_io_counters()&lt;/tt&gt; has been extended to report additional metrics on Linux and FreeBSD:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;busy_time, which is the time spent doing actual I/Os (in milliseconds).&lt;/li&gt;
&lt;li&gt;read_merged_count and write_merged_count (Linux only), which is number of merged reads and writes (see &lt;a class="reference external" href="https://www.kernel.org/doc/Documentation/iostats.txt"&gt;iostats&lt;/a&gt; doc)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With these new metrics it is possible to have a better representation of actual &lt;a class="reference external" href="https://github.com/giampaolo/psutil/issues/756"&gt;disk utilization&lt;/a&gt;, similarly to &lt;tt class="docutils literal"&gt;iostat&lt;/tt&gt; command on Linux.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="os-constants"&gt;
&lt;h2&gt;OS constants&lt;/h2&gt;
&lt;p&gt;Given the increasing number of platform-specific metrics I added a new set of constants to quickly differentiate what platform you're on: &lt;tt class="docutils literal"&gt;psutil.LINUX&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;psutil.WINDOWS&lt;/tt&gt;, etc. Main bug fixes:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/giampaolo/psutil/issues/734"&gt;#734&lt;/a&gt;: on Python 3 invalid UTF-8 data was not correctly handled for proces &lt;tt class="docutils literal"&gt;name()&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;cwd()&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;exe()&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;cmdline()&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;open_files()&lt;/tt&gt; methods, resulting in UnicodeDecodeError. This was affecting all platforms. Now surrogateescape error handler is used as a workaround for replacing the corrupted data.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/giampaolo/psutil/issues/761"&gt;#761&lt;/a&gt;: [Windows] &lt;tt class="docutils literal"&gt;psutil.boot_time()&lt;/tt&gt; no longer wraps to 0 after 49 days.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/giampaolo/psutil/issues/767"&gt;#767&lt;/a&gt;: [Linux] &lt;tt class="docutils literal"&gt;disk_io_counters()&lt;/tt&gt; may raise ValueError on 2.6 kernels and it's  broken on 2.4 kernels.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/giampaolo/psutil/issues/764"&gt;#764&lt;/a&gt;: psutil can now be compiled on NetBSD-6.X.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/giampaolo/psutil/issues/704"&gt;#704&lt;/a&gt;: psutil can now be compiled on Solaris sparc.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Complete list of bug fixes is available &lt;a class="reference external" href="https://github.com/giampaolo/psutil/blob/master/HISTORY.rst"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="porting-code"&gt;
&lt;h2&gt;Porting code&lt;/h2&gt;
&lt;p&gt;Being 4.0.0 a major version, I took the chance to (lightly) change / break some APIs.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;Process.memory_info()&lt;/tt&gt; no longer returns just an (rss, vms) namedtuple. Instead it returns a namedtuple of variable length, changing depending on the platform (rss and vms are always present though, also on Windows). Basically it returns the same result of old &lt;tt class="docutils literal"&gt;memory_info_ex()&lt;/tt&gt;. This shouldn't break your existent code, unless you were doing &lt;tt class="docutils literal"&gt;rss, vms = p.memory_info()&lt;/tt&gt;.&lt;/li&gt;
&lt;li&gt;At the same time process_memory_info_ex() is now deprecated. The method is still there as an alias for &lt;tt class="docutils literal"&gt;memory_info()&lt;/tt&gt;, issuing a deprecation warning.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;psutil.disk_io_counters()&lt;/tt&gt; returns 2 additional fields on Linux and 1 additional field on FreeBSD.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;psutil.disk_io_counters()&lt;/tt&gt; on NetBSD and OpenBSD no longer return write_count and read_count metrics because the kernel do not provide them (we were returning the busy time instead). I also don't expect this to be a big issue because NetBSD and OpenBSD support is very recent.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="final-notes-and-looking-for-a-job"&gt;
&lt;h2&gt;Final notes and looking for a job&lt;/h2&gt;
&lt;p&gt;OK, this is it. I would like to spend a couple more words to announce the world that I'm currently unemployed and looking for a remote gig again! =) I want remote because my plan for this year is to remain in Prague (Czech Republic) and possibly spend 2-3 months in Asia. If you know about any company who's looking for a Python backend dev who can work from afar feel free to share my &lt;a class="reference external" href="https://www.linkedin.com/in/grodola/"&gt;Linkedin profile&lt;/a&gt; or mail me at g.rodola [at] gmail [dot] com.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="external-links"&gt;
&lt;h2&gt;External links&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.reddit.com/r/Python/comments/469p2c/psutil_400_real_process_memory_info_and_process/"&gt;reddit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://news.ycombinator.com/item?id=11119298"&gt;hacker news&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="2016"></category><category term="psutil"></category><category term="memory"></category><category term="python"></category></entry></feed>