<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Giampaolo Rodola - 2019</title><link href="/" rel="alternate"></link><link href="/feeds/2019.atom.xml" rel="self"></link><id>/</id><updated>2019-05-29T00:00:00+02:00</updated><subtitle>Python enthusiast, core developer, psutil author</subtitle><entry><title>System load average on Windows in Python</title><link href="/blog/2019/system-load-average-on-windows-in-python" rel="alternate"></link><published>2019-05-29T00:00:00+02:00</published><updated>2019-05-29T00:00:00+02:00</updated><author><name>Giampaolo Rodola</name></author><id>tag:None,2019-05-29:/blog/2019/system-load-average-on-windows-in-python</id><summary type="html">&lt;p&gt;New &lt;a class="reference external" href="https://github.com/giampaolo/psutil/"&gt;psutil&lt;/a&gt; 5.6.2 release implements an emulation of &lt;a class="reference external" href="https://docs.python.org/3/library/os.html#os.getloadavg"&gt;os.getloadavg()&lt;/a&gt; on Windows which was kindly &lt;a class="reference external" href="https://github.com/giampaolo/psutil/pull/1485"&gt;contributed by Ammar Askar&lt;/a&gt; who originally implemented it for &lt;a class="reference external" href="https://github.com/python/cpython/pull/8357/files"&gt;cPython's test suite&lt;/a&gt;. This idea has been floating around for quite a while. The first proposal dates back to &lt;a class="reference external" href="https://code.google.com/archive/p/psutil/issues/139"&gt;2010&lt;/a&gt;, when psutil was still …&lt;/p&gt;</summary><content type="html">&lt;p&gt;New &lt;a class="reference external" href="https://github.com/giampaolo/psutil/"&gt;psutil&lt;/a&gt; 5.6.2 release implements an emulation of &lt;a class="reference external" href="https://docs.python.org/3/library/os.html#os.getloadavg"&gt;os.getloadavg()&lt;/a&gt; on Windows which was kindly &lt;a class="reference external" href="https://github.com/giampaolo/psutil/pull/1485"&gt;contributed by Ammar Askar&lt;/a&gt; who originally implemented it for &lt;a class="reference external" href="https://github.com/python/cpython/pull/8357/files"&gt;cPython's test suite&lt;/a&gt;. This idea has been floating around for quite a while. The first proposal dates back to &lt;a class="reference external" href="https://code.google.com/archive/p/psutil/issues/139"&gt;2010&lt;/a&gt;, when psutil was still hosted on Google Code, and it popped up &lt;a class="reference external" href="https://github.com/giampaolo/psutil/issues?utf8=%E2%9C%93&amp;amp;q=getloadavg"&gt;multiple times&lt;/a&gt; throughout the years. There was/is a bunch of info on internet mentioning the bits with which it's theoretically possible to do this (the so called System Processor Queue Length), but I couldn't find any real implementation. A &lt;a class="reference external" href="https://www.google.com/search?client=ubuntu&amp;amp;hs=2EI&amp;amp;channel=fs&amp;amp;ei=LafCXO2ZE8PKswX9kY-wAw&amp;amp;q=windows+load+average&amp;amp;oq=windows+load+average&amp;amp;gs_l=psy-ab.3..0j0i22i30l7.12536.13873..14008...0.0..0.482.2591.4-6......0....1..gws-wiz.......0i71j0i131.37ys3SB25pE"&gt;Google search&lt;/a&gt; tells there is quite some demand for this, but very few tools out there providing this natively (the only one I could find is this &lt;a class="reference external" href="https://blog.sflow.com/2011/02/windows-load-average.html"&gt;sFlowTrend&lt;/a&gt; tool and &lt;a class="reference external" href="https://www.zabbix.com/forum/zabbix-help/50423-windows-cpu-load"&gt;Zabbix&lt;/a&gt;), so I'm very happy this finally landed into psutil / Python.&lt;/p&gt;
&lt;div class="section" id="other-improvements-and-bugfixes-in-psutil-5-6-2"&gt;
&lt;h2&gt;Other improvements and bugfixes in psutil 5.6.2&lt;/h2&gt;
&lt;p&gt;The full list is &lt;a class="reference external" href="https://github.com/giampaolo/psutil/blob/master/HISTORY.rst#562"&gt;here&lt;/a&gt; but I would like to mention a couple:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/giampaolo/psutil/issues/1476"&gt;1476&lt;/a&gt;: the possibility to set process' high I/O priority on Windows&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/giampaolo/psutil/issues/1476"&gt;1458&lt;/a&gt;: colorized test output. I admit nobody will use this directly but it's very cool and I'm porting it to a bunch of other projects I work on (e.g. pyftpdlib). Also, perhaps this could be a good candidate for a small module to put on PYPI which can also include some functionalities taken from pytest and which I'm gradually re-implementing in unittest module amongst which:&lt;ul&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/giampaolo/psutil/issues/1478"&gt;1478&lt;/a&gt;: re-running failed tests&lt;/li&gt;
&lt;li&gt;display test timings/durations: this is something I'm contributing to cPython, see &lt;a class="reference external" href="https://bugs.python.org/issue4080"&gt;BPO-4080&lt;/a&gt; and and &lt;a class="reference external" href="https://github.com/python/cpython/pull/12271/files"&gt;PR-12271&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="about-me"&gt;
&lt;h2&gt;About me&lt;/h2&gt;
&lt;p&gt;I'm currently in China (Shenzhen) for a mix of vacation and work, and I will likely take a break from Open Source for a while (likely 2.5 months, during which I will also go to Philippines and Japan - I love Asia ;-)).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="external"&gt;
&lt;h2&gt;External&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.reddit.com/r/Python/comments/bhji0m/new_psutil_562_with_load_average_emulation_on/"&gt;Reddit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://news.ycombinator.com/newest"&gt;Hacker News&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="2019"></category><category term="psutil"></category><category term="windows"></category><category term="unittest"></category><category term="travel"></category></entry><entry><title>psutil 5.6.0 and process parents</title><link href="/blog/2019/psutil-560-and-process-parents" rel="alternate"></link><published>2019-03-05T00:00:00+01:00</published><updated>2019-03-05T00:00:00+01:00</updated><author><name>Giampaolo Rodola</name></author><id>tag:None,2019-03-05:/blog/2019/psutil-560-and-process-parents</id><summary type="html">&lt;p&gt;Hello world =)&lt;/p&gt;
&lt;p&gt;It was a long time since my last blog post (over 1 year and a half). During this time I moved between Italy, Prague and Shenzhen (China), and also contributed a couple of nice patches for Python I want to blog about when Python 3.8 will be …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Hello world =)&lt;/p&gt;
&lt;p&gt;It was a long time since my last blog post (over 1 year and a half). During this time I moved between Italy, Prague and Shenzhen (China), and also contributed a couple of nice patches for Python I want to blog about when Python 3.8 will be out: zero-copy for &lt;a class="reference external" href="https://bugs.python.org/issue33671"&gt;shutil.copy()&lt;/a&gt; functions and &lt;a class="reference external" href="https://github.com/python/cpython/pull/11784"&gt;socket.create_server()&lt;/a&gt; utility function. But let's move on and talk about what this blog post is about: the next major psutil version.&lt;/p&gt;
&lt;div class="section" id="process-parents"&gt;
&lt;h2&gt;Process parents()&lt;/h2&gt;
&lt;p&gt;From the doc: return the parents of this process as a list of Process instances. If no parents are known return an empty list.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;psutil&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;psutil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5312&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parents&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;psutil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4699&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;bash&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;started&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;09:06:44&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
 &lt;span class="n"&gt;psutil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4689&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;gnome-terminal-server&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;started&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;0:06:44&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
 &lt;span class="n"&gt;psutil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;systemd&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;started&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;05:56:55&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Nothing really new here, as it's a convenience method based on the existing &lt;a class="reference external" href="https://psutil.readthedocs.io/en/latest/#psutil.Process.parent"&gt;parent()&lt;/a&gt; method, but still it's something nice to have implemented as a builtin and which can be used to work with process trees in conjunction with &lt;a class="reference external" href="https://psutil.readthedocs.io/en/latest/#psutil.Process.children"&gt;children()&lt;/a&gt; method. The idea was proposed by Ghislain Le Meur.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="windows"&gt;
&lt;h2&gt;Windows&lt;/h2&gt;
&lt;p&gt;A bunch of interesting improvements occurred on Windows.&lt;/p&gt;
&lt;p&gt;The first one is that certain Windows APIs requiring to be dynamically loaded from DLL libraries are now loaded only once on startup (instead of on per function call), significantly speeding up different functions and methods. This is described and implemented in PR &lt;a class="reference external" href="https://github.com/giampaolo/psutil/pull/1422"&gt;#1422&lt;/a&gt; which also provides benchmarks.&lt;/p&gt;
&lt;p&gt;Another one is Process' &lt;a class="reference external" href="https://psutil.readthedocs.io/en/latest/#psutil.Process.suspend"&gt;suspend()&lt;/a&gt; and &lt;a class="reference external" href="https://psutil.readthedocs.io/en/latest/#psutil.Process.resume"&gt;resume()&lt;/a&gt; methods. Before they were using CreateToolhelp32Snapshot() to iterate over all process' threads which was somewhat unorthodox and didn't work if process was suspended via Process Hacker. Now it relies on undocumented NtSuspendProcess and NtResumeProcess APIs, which is the same approach used by ProcessHacker and other famous Sysinternals tools. The change was proposed and discussed in issue &lt;a class="reference external" href="https://github.com/giampaolo/psutil/issues/1379"&gt;#1379&lt;/a&gt; and implemented in PR &lt;a class="reference external" href="https://github.com/giampaolo/psutil/pull/1435"&gt;#1435&lt;/a&gt;. I think I will later propose the addition of suspend() and resume() method in subprocess module in Python.&lt;/p&gt;
&lt;p&gt;Last nice improvement about Windows it's about SE DEBUG mode. SE DEBUG mode can be seen as a &amp;quot;bit&amp;quot; which you can set on the Python process on startup so that we have more chances of querying processes owned by other users, including many owned by Administrator and Local System. Practically speaking this means we will get less AccessDenied exceptions for low PID processes.  It turns out the code doing this has been broken presumably for years, and never set SE DEBUG. This is fixed now and the change was made in PR &lt;a class="reference external" href="https://github.com/giampaolo/psutil/pull/1429"&gt;#1429&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="removal-of-process-memory-maps-on-osx"&gt;
&lt;h2&gt;Removal of Process.memory_maps() on OSX&lt;/h2&gt;
&lt;p&gt;This was somewhat &lt;a class="reference external" href="https://github.com/giampaolo/psutil/issues/1291"&gt;controversial&lt;/a&gt;. The history about memory_maps() on OSX is a painful one. It was based on an undocumented and probably broken Apple API called proc_regionfilename() which made memory_maps() either randomly raise EINVAL or result in segfault! Also, memory_maps() could only be used for the current process, limiting its usefulness to os.getpid() only. For any other process it raised AccessDenied. This has been a known problem for a long time but sometime over the last few years I got tired of seeing random test failures on Travis that I couldn't reproduce locally, so I commented the unit-test and forget about it until last week, when I realized the real impact this has on production code. I tried looking for a solution once again, spending quite some time looking for public source codes which managed to do this right with no luck. The only tool I'm aware of which does this right is vmmap from Apple, but it's closed source. After careful thinking, since no solution was found, I decided to just remove memory_maps() from OSX. This is not something I took lightly, but considering the alternative is getting a segfault I decided to sacrifice backward compatibility (hence the major version bump).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="improved-exceptions"&gt;
&lt;h2&gt;Improved exceptions&lt;/h2&gt;
&lt;p&gt;One problem which afflicted psutil maintenance over the years was receiving bug reports including tracebacks which didn't provide any information on what syscall failed exactly. This was especially painful on Windows where a single routine can invoke different Windows APIs. Now the OSError (or WindowsError) exception will include the syscall from which the error originated, see &lt;a class="reference external" href="https://github.com/giampaolo/psutil/pull/1428"&gt;PR-#1428&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="other-important-bugfixes"&gt;
&lt;h2&gt;Other important bugfixes&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/giampaolo/psutil/issues/1353"&gt;#1353&lt;/a&gt;: process_iter() is now thread safe&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/giampaolo/psutil/issues/1411"&gt;#1411&lt;/a&gt;: [BSD]segfault could occur on Process instantiation&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/giampaolo/psutil/issues/1427"&gt;#1427&lt;/a&gt;: [OSX] Process cmdline() and environ() may erroneously raise OSError on failed malloc().&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/giampaolo/psutil/issues/1447"&gt;#1447&lt;/a&gt;: original exception wasn't turned into NoSuchProcess / AccessDenied exceptions when using Process.oneshot() ctx manager.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A full list of enhancements and bug fixes is available &lt;a class="reference external" href="https://github.com/giampaolo/psutil/blob/master/HISTORY.rst#560"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</content><category term="2019"></category><category term="psutil"></category></entry></feed>